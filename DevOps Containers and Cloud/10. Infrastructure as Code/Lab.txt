Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\NB> terraform -help
Usage: terraform [global options] <subcommand> [args]

The available commands for execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.

Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  metadata      Metadata related commands
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  test          Experimental support for module integration testing
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management

Global options (use these before the subcommand, if any):
  -chdir=DIR    Switch to a different working directory before executing the
                given subcommand.
  -help         Show this help output, or the help for a specified subcommand.
  -version      An alias for the "version" subcommand.
PS C:\Users\NB> cd '.\Infrastructure as Code Lab\'
PS C:\Users\NB\Infrastructure as Code Lab> explorer .
PS C:\Users\NB\Infrastructure as Code Lab> docker context ls
NAME                TYPE                DESCRIPTION                               DOCKER ENDPOINT                             KUBERNETES ENDPOINT   ORCHESTRATOR
default *           moby                Current DOCKER_HOST based configuration   npipe:////./pipe/docker_engine
desktop-linux       moby                                                          npipe:////./pipe/dockerDesktopLinuxEngine
PS C:\Users\NB\Infrastructure as Code Lab> docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
PS C:\Users\NB\Infrastructure as Code Lab> dir


    Directory: C:\Users\NB\Infrastructure as Code Lab


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----         04-Jun-23     08:25            413 nginx-hello.tf


PS C:\Users\NB\Infrastructure as Code Lab> terrafrom init
terrafrom : The term 'terrafrom' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of
the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ terrafrom init
+ ~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (terrafrom:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Users\NB\Infrastructure as Code Lab> terraform init

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "~> 3.0.1"...
- Installing kreuzwerker/docker v3.0.2...
- Installed kreuzwerker/docker v3.0.2 (self-signed, key ID BD080C4571C6104C)

Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://www.terraform.io/docs/cli/plugins/signing.html

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
PS C:\Users\NB\Infrastructure as Code Lab> dir


    Directory: C:\Users\NB\Infrastructure as Code Lab


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         04-Jun-23     08:28                .terraform
-a----         04-Jun-23     08:28           1337 .terraform.lock.hcl
-a----         04-Jun-23     08:25            413 nginx-hello.tf


PS C:\Users\NB\Infrastructure as Code Lab> terraform fmt
nginx-hello.tf
PS C:\Users\NB\Infrastructure as Code Lab> terraform fmt
nginx-hello.tf
PS C:\Users\NB\Infrastructure as Code Lab> terraform fmt
nginx-hello.tf
PS C:\Users\NB\Infrastructure as Code Lab> terraform fmt
nginx-hello.tf
PS C:\Users\NB\Infrastructure as Code Lab> terraform validate
╷
│ Error: Reference to undeclared resource
│
│   on nginx-hello.tf line 19, in resource "docker_container" "nginx":
│   19:   image = resorce.docker_image.name
│
│ A managed resource "resorce" "docker_image" has not been declared in the root module.
╵
PS C:\Users\NB\Infrastructure as Code Lab> terraform validate
╷
│ Error: Reference to undeclared resource
│
│   on nginx-hello.tf line 19, in resource "docker_container" "nginx":
│   19:   image = resource.docker_image.name
│
│ A managed resource "docker_image" "name" has not been declared in the root module.
╵
PS C:\Users\NB\Infrastructure as Code Lab> terraform validate
╷
│ Error: Unsupported block type
│
│   on nginx-hello.tf line 22, in resource "docker_container" "nginx":
│   22:   port {
│
│ Blocks of type "port" are not expected here. Did you mean "host"?
╵
PS C:\Users\NB\Infrastructure as Code Lab> terraform validate
Success! The configuration is valid.

PS C:\Users\NB\Infrastructure as Code Lab> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = "nginxdemos/hello"
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "nginx_hello"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "nginxdemos/hello"
      + repo_digest = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.nginx: Creating...
docker_image.nginx: Creation complete after 0s [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 3s [id=7c514f1537e76ccd02fdbe5be97814b7ca8970c913950ba57693731f65ce1860]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
PS C:\Users\NB\Infrastructure as Code Lab> docker ps
CONTAINER ID   IMAGE              COMMAND                  CREATED          STATUS          PORTS                  NAMES
7c514f1537e7   nginxdemos/hello   "/docker-entrypoint.…"   30 seconds ago   Up 27 seconds   0.0.0.0:8080->80/tcp   nginx_hello
PS C:\Users\NB\Infrastructure as Code Lab> terraform apply
docker_image.nginx: Refreshing state... [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_container.nginx: Refreshing state... [id=7c514f1537e76ccd02fdbe5be97814b7ca8970c913950ba57693731f65ce1860]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # docker_container.nginx must be replaced
-/+ resource "docker_container" "nginx" {
      + bridge                                      = (known after apply)
      ~ command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> (known after apply)
      + container_logs                              = (known after apply)
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      ~ entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> (known after apply)
      ~ env                                         = [] -> (known after apply)
      + exit_code                                   = (known after apply)
      - group_add                                   = [] -> null
      ~ hostname                                    = "7c514f1537e7" -> (known after apply)
      ~ id                                          = "7c514f1537e76ccd02fdbe5be97814b7ca8970c913950ba57693731f65ce1860" -> (known after apply)
      ~ image                                       = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090" -> "nginxdemos/hello" # forces replacement
      ~ init                                        = false -> (known after apply)
      ~ ipc_mode                                    = "private" -> (known after apply)
      ~ log_driver                                  = "json-file" -> (known after apply)
      - log_opts                                    = {} -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
        name                                        = "nginx_hello"
      ~ network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - mac_address               = "02:42:ac:11:00:02"
              - network_name              = "bridge"
            },
        ] -> (known after apply)
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      ~ runtime                                     = "runc" -> (known after apply)
      ~ security_opts                               = [] -> (known after apply)
      ~ shm_size                                    = 64 -> (known after apply)
      ~ stop_signal                                 = "SIGQUIT" -> (known after apply)
      ~ stop_timeout                                = 0 -> (known after apply)
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
        # (13 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_container.nginx: Destroying... [id=7c514f1537e76ccd02fdbe5be97814b7ca8970c913950ba57693731f65ce1860]
docker_container.nginx: Destruction complete after 1s
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 1s [id=dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.
PS C:\Users\NB\Infrastructure as Code Lab> terraform destroy
docker_image.nginx: Refreshing state... [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_container.nginx: Refreshing state... [id=dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # docker_container.nginx will be destroyed
  - resource "docker_container" "nginx" {
      - attach                                      = false -> null
      - command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> null
      - container_read_refresh_timeout_milliseconds = 15000 -> null
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      - entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> null
      - env                                         = [] -> null
      - group_add                                   = [] -> null
      - hostname                                    = "dcde4eaf024c" -> null
      - id                                          = "dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005" -> null
      - image                                       = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090" -> null
      - init                                        = false -> null
      - ipc_mode                                    = "private" -> null
      - log_driver                                  = "json-file" -> null
      - log_opts                                    = {} -> null
      - logs                                        = false -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
      - must_run                                    = true -> null
      - name                                        = "nginx_hello" -> null
      - network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - mac_address               = "02:42:ac:11:00:02"
              - network_name              = "bridge"
            },
        ] -> null
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      - read_only                                   = false -> null
      - remove_volumes                              = true -> null
      - restart                                     = "no" -> null
      - rm                                          = false -> null
      - runtime                                     = "runc" -> null
      - security_opts                               = [] -> null
      - shm_size                                    = 64 -> null
      - start                                       = true -> null
      - stdin_open                                  = false -> null
      - stop_signal                                 = "SIGQUIT" -> null
      - stop_timeout                                = 0 -> null
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
      - tty                                         = false -> null
      - wait                                        = false -> null
      - wait_timeout                                = 60 -> null

      - ports {
          - external = 8080 -> null
          - internal = 80 -> null
          - ip       = "0.0.0.0" -> null
          - protocol = "tcp" -> null
        }
    }

  # docker_image.nginx will be destroyed
  - resource "docker_image" "nginx" {
      - id          = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello" -> null
      - image_id    = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090" -> null
      - name        = "nginxdemos/hello" -> null
      - repo_digest = "nginxdemos/hello@sha256:46bd594006f4bacc8a6c1cc2941ef842caf2358bc258619f7bea1558bc461b38" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: no

Destroy cancelled.
PS C:\Users\NB\Infrastructure as Code Lab> dir


    Directory: C:\Users\NB\Infrastructure as Code Lab


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         04-Jun-23     08:28                .terraform
-a----         04-Jun-23     08:28           1337 .terraform.lock.hcl
-a----         04-Jun-23     08:40            443 nginx-hello.tf
-a----         04-Jun-23     08:44           4447 terraform.tfstate
-a----         04-Jun-23     08:44           4447 terraform.tfstate.backup


PS C:\Users\NB\Infrastructure as Code Lab> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = "nginxdemos/hello"
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "nginx_hello"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "nginxdemos/hello"
      + repo_digest = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.nginx: Creating...
docker_image.nginx: Creation complete after 0s [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_container.nginx: Creating...
╷
│ Error: Unable to create container: Error response from daemon: Conflict. The container name "/nginx_hello" is already in use by container "dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005". You have to remove (or rename) that container to be able to reuse that name.
│
│   with docker_container.nginx,
│   on nginx-hello.tf line 18, in resource "docker_container" "nginx":
│   18: resource "docker_container" "nginx" {
│
╵
PS C:\Users\NB\Infrastructure as Code Lab> terraform apply
docker_image.nginx: Refreshing state... [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_container.nginx: Refreshing state... [id=7c514f1537e76ccd02fdbe5be97814b7ca8970c913950ba57693731f65ce1860]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = "nginxdemos/hello"
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "nginx_hello"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8080
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_container.nginx: Creating...
╷
│ Error: Unable to create container: Error response from daemon: Conflict. The container name "/nginx_hello" is already in use by container "dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005". You have to remove (or rename) that container to be able to reuse that name.
│
│   with docker_container.nginx,
│   on nginx-hello.tf line 18, in resource "docker_container" "nginx":
│   18: resource "docker_container" "nginx" {
│
╵
PS C:\Users\NB\Infrastructure as Code Lab> terraform apply
docker_image.nginx: Refreshing state... [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_container.nginx: Refreshing state... [id=dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # docker_container.nginx must be replaced
-/+ resource "docker_container" "nginx" {
      + bridge                                      = (known after apply)
      ~ command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> (known after apply)
      + container_logs                              = (known after apply)
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      ~ entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> (known after apply)
      ~ env                                         = [] -> (known after apply)
      + exit_code                                   = (known after apply)
      - group_add                                   = [] -> null
      ~ hostname                                    = "dcde4eaf024c" -> (known after apply)
      ~ id                                          = "dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005" -> (known after apply)
      ~ image                                       = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090" -> "nginxdemos/hello" # forces replacement
      ~ init                                        = false -> (known after apply)
      ~ ipc_mode                                    = "private" -> (known after apply)
      ~ log_driver                                  = "json-file" -> (known after apply)
      - log_opts                                    = {} -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
        name                                        = "nginx_hello"
      ~ network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - mac_address               = "02:42:ac:11:00:02"
              - network_name              = "bridge"
            },
        ] -> (known after apply)
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      ~ runtime                                     = "runc" -> (known after apply)
      ~ security_opts                               = [] -> (known after apply)
      ~ shm_size                                    = 64 -> (known after apply)
      ~ stop_signal                                 = "SIGQUIT" -> (known after apply)
      ~ stop_timeout                                = 0 -> (known after apply)
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
        # (13 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_container.nginx: Destroying... [id=dcde4eaf024cb12183494213cff14add2d1191b954ebda1fc8c735c376fc5005]
docker_container.nginx: Destruction complete after 0s
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 2s [id=84c24ccee16d04f03294d037b5703a805ba80d881a45ee0d44744da3ac3bcc16]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.
PS C:\Users\NB\Infrastructure as Code Lab> terraform destroy
docker_image.nginx: Refreshing state... [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_container.nginx: Refreshing state... [id=84c24ccee16d04f03294d037b5703a805ba80d881a45ee0d44744da3ac3bcc16]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # docker_container.nginx will be destroyed
  - resource "docker_container" "nginx" {
      - attach                                      = false -> null
      - command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> null
      - container_read_refresh_timeout_milliseconds = 15000 -> null
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      - entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> null
      - env                                         = [] -> null
      - group_add                                   = [] -> null
      - hostname                                    = "84c24ccee16d" -> null
      - id                                          = "84c24ccee16d04f03294d037b5703a805ba80d881a45ee0d44744da3ac3bcc16" -> null
      - image                                       = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090" -> null
      - init                                        = false -> null
      - ipc_mode                                    = "private" -> null
      - log_driver                                  = "json-file" -> null
      - log_opts                                    = {} -> null
      - logs                                        = false -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
      - must_run                                    = true -> null
      - name                                        = "nginx_hello" -> null
      - network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - mac_address               = "02:42:ac:11:00:02"
              - network_name              = "bridge"
            },
        ] -> null
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      - read_only                                   = false -> null
      - remove_volumes                              = true -> null
      - restart                                     = "no" -> null
      - rm                                          = false -> null
      - runtime                                     = "runc" -> null
      - security_opts                               = [] -> null
      - shm_size                                    = 64 -> null
      - start                                       = true -> null
      - stdin_open                                  = false -> null
      - stop_signal                                 = "SIGQUIT" -> null
      - stop_timeout                                = 0 -> null
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
      - tty                                         = false -> null
      - wait                                        = false -> null
      - wait_timeout                                = 60 -> null

      - ports {
          - external = 8080 -> null
          - internal = 80 -> null
          - ip       = "0.0.0.0" -> null
          - protocol = "tcp" -> null
        }
    }

  # docker_image.nginx will be destroyed
  - resource "docker_image" "nginx" {
      - id          = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello" -> null
      - image_id    = "sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090" -> null
      - name        = "nginxdemos/hello" -> null
      - repo_digest = "nginxdemos/hello@sha256:46bd594006f4bacc8a6c1cc2941ef842caf2358bc258619f7bea1558bc461b38" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

docker_container.nginx: Destroying... [id=84c24ccee16d04f03294d037b5703a805ba80d881a45ee0d44744da3ac3bcc16]
docker_container.nginx: Destruction complete after 1s
docker_image.nginx: Destroying... [id=sha256:f1f55236c9e2897e3cb18a07cf0cd5d5f3d54aaecfbfabdd081aa73f95bb9090nginxdemos/hello]
docker_image.nginx: Destruction complete after 0s

Destroy complete! Resources: 2 destroyed.
PS C:\Users\NB\Infrastructure as Code Lab> docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
PS C:\Users\NB\Infrastructure as Code Lab> docker image ls -a |findstr nginx
PS C:\Users\NB\Infrastructure as Code Lab> terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.nginx will be created
  + resource "docker_container" "nginx" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = "nginxdemos/hello"
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "nginx_hello"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 5000
          + internal = 80
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.nginx will be created
  + resource "docker_image" "nginx" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "nginxdemos/hello"
      + repo_digest = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.nginx: Creating...
docker_image.nginx: Still creating... [10s elapsed]
docker_image.nginx: Creation complete after 13s [id=sha256:022b2e2ffb6e5fb34c2cc5e2ec804450145e91102b9654295a5104ebeece5850nginxdemos/hello]
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 1s [id=04d5cbfca0d0d22e77781465ea10abd442131650e792c8cd2579f0589e5d70ea]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
PS C:\Users\NB\Infrastructure as Code Lab> docker image ls -a |findstr nginx
nginxdemos/hello                             latest    022b2e2ffb6e   10 days ago    41.4MB
PS C:\Users\NB\Infrastructure as Code Lab> terraform destroy
docker_image.nginx: Refreshing state... [id=sha256:022b2e2ffb6e5fb34c2cc5e2ec804450145e91102b9654295a5104ebeece5850nginxdemos/hello]
docker_container.nginx: Refreshing state... [id=04d5cbfca0d0d22e77781465ea10abd442131650e792c8cd2579f0589e5d70ea]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # docker_container.nginx will be destroyed
  - resource "docker_container" "nginx" {
      - attach                                      = false -> null
      - command                                     = [
          - "nginx",
          - "-g",
          - "daemon off;",
        ] -> null
      - container_read_refresh_timeout_milliseconds = 15000 -> null
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      - entrypoint                                  = [
          - "/docker-entrypoint.sh",
        ] -> null
      - env                                         = [] -> null
      - group_add                                   = [] -> null
      - hostname                                    = "04d5cbfca0d0" -> null
      - id                                          = "04d5cbfca0d0d22e77781465ea10abd442131650e792c8cd2579f0589e5d70ea" -> null
      - image                                       = "sha256:022b2e2ffb6e5fb34c2cc5e2ec804450145e91102b9654295a5104ebeece5850" -> null
      - init                                        = false -> null
      - ipc_mode                                    = "private" -> null
      - log_driver                                  = "json-file" -> null
      - log_opts                                    = {} -> null
      - logs                                        = false -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
      - must_run                                    = true -> null
      - name                                        = "nginx_hello" -> null
      - network_data                                = [
          - {
              - gateway                   = "172.17.0.1"
              - global_ipv6_address       = ""
              - global_ipv6_prefix_length = 0
              - ip_address                = "172.17.0.2"
              - ip_prefix_length          = 16
              - ipv6_gateway              = ""
              - mac_address               = "02:42:ac:11:00:02"
              - network_name              = "bridge"
            },
        ] -> null
      - network_mode                                = "default" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      - read_only                                   = false -> null
      - remove_volumes                              = true -> null
      - restart                                     = "no" -> null
      - rm                                          = false -> null
      - runtime                                     = "runc" -> null
      - security_opts                               = [] -> null
      - shm_size                                    = 64 -> null
      - start                                       = true -> null
      - stdin_open                                  = false -> null
      - stop_signal                                 = "SIGQUIT" -> null
      - stop_timeout                                = 0 -> null
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
      - tty                                         = false -> null
      - wait                                        = false -> null
      - wait_timeout                                = 60 -> null

      - ports {
          - external = 5000 -> null
          - internal = 80 -> null
          - ip       = "0.0.0.0" -> null
          - protocol = "tcp" -> null
        }
    }

  # docker_image.nginx will be destroyed
  - resource "docker_image" "nginx" {
      - id          = "sha256:022b2e2ffb6e5fb34c2cc5e2ec804450145e91102b9654295a5104ebeece5850nginxdemos/hello" -> null
      - image_id    = "sha256:022b2e2ffb6e5fb34c2cc5e2ec804450145e91102b9654295a5104ebeece5850" -> null
      - name        = "nginxdemos/hello" -> null
      - repo_digest = "nginxdemos/hello@sha256:3ae2fcf73c843d0655ebc7abc860d0d2f626042d6245e9eedddb8f7aaf0cfecd" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

docker_container.nginx: Destroying... [id=04d5cbfca0d0d22e77781465ea10abd442131650e792c8cd2579f0589e5d70ea]
docker_container.nginx: Destruction complete after 1s
docker_image.nginx: Destroying... [id=sha256:022b2e2ffb6e5fb34c2cc5e2ec804450145e91102b9654295a5104ebeece5850nginxdemos/hello]
docker_image.nginx: Destruction complete after 0s

Destroy complete! Resources: 2 destroyed.
PS C:\Users\NB\Infrastructure as Code Lab> docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
PS C:\Users\NB\Infrastructure as Code Lab> docker image ls -a |findstr nginx
PS C:\Users\NB\Infrastructure as Code Lab> Get-History

  Id CommandLine
  -- -----------
   1 terraform -help
   2 cd '.\Infrastructure as Code Lab\'
   3 explorer .
   4 docker context ls
   5 docker ps
   6 dir
   7 terrafrom init
   8 terraform init
   9 dir
  10 terraform fmt
  11 terraform fmt
  12 terraform fmt
  13 terraform fmt
  14 terraform validate
  15 terraform validate
  16 terraform validate
  17 terraform validate
  18 terraform apply
  19 docker ps
  20 terraform apply
  21 terraform destroy
  22 dir
  23 terraform apply
  24 terraform apply
  25 terraform apply
  26 terraform destroy
  27 docker ps
  28 docker image ls -a |findstr nginx
  29 terraform apply
  30 docker image ls -a |findstr nginx
  31 terraform destroy
  32 docker ps
  33 docker image ls -a |findstr nginx


PS C:\Users\NB\Infrastructure as Code Lab>