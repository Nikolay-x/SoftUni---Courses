Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\NB> cd .\Kubernetes\
PS C:\Users\NB\Kubernetes> vagrant up
Bringing machine 'node1' up with 'virtualbox' provider...
Bringing machine 'node2' up with 'virtualbox' provider...
Bringing machine 'node3' up with 'virtualbox' provider...
==> node1: Checking if box 'shekeriev/debian-11' version '0.5' is up to date...
==> node1: Clearing any previously set forwarded ports...
==> node1: Clearing any previously set network interfaces...
==> node1: Preparing network interfaces based on configuration...
    node1: Adapter 1: nat
    node1: Adapter 2: hostonly
==> node1: Forwarding ports...
    node1: 22 (guest) => 2222 (host) (adapter 1)
==> node1: Running 'pre-boot' VM customizations...
==> node1: Booting VM...
==> node1: Waiting for machine to boot. This may take a few minutes...
    node1: SSH address: 127.0.0.1:2222
    node1: SSH username: vagrant
    node1: SSH auth method: private key
==> node1: Machine booted and ready!
==> node1: Checking for guest additions in VM...
==> node1: Setting hostname...
==> node1: Configuring and enabling network interfaces...
==> node1: Mounting shared folders...
    node1: /vagrant => C:/Users/NB/Kubernetes/vagrant
==> node1: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==> node1: flag to force provisioning. Provisioners marked to run always will still run.
==> node2: Checking if box 'shekeriev/debian-11' version '0.5' is up to date...
==> node2: Clearing any previously set forwarded ports...
==> node2: Fixed port collision for 22 => 2222. Now on port 2200.
==> node2: Clearing any previously set network interfaces...
==> node2: Preparing network interfaces based on configuration...
    node2: Adapter 1: nat
    node2: Adapter 2: hostonly
==> node2: Forwarding ports...
    node2: 22 (guest) => 2200 (host) (adapter 1)
==> node2: Running 'pre-boot' VM customizations...
==> node2: Booting VM...
==> node2: Waiting for machine to boot. This may take a few minutes...
    node2: SSH address: 127.0.0.1:2200
    node2: SSH username: vagrant
    node2: SSH auth method: private key
==> node2: Machine booted and ready!
==> node2: Checking for guest additions in VM...
==> node2: Setting hostname...
==> node2: Configuring and enabling network interfaces...
==> node2: Mounting shared folders...
    node2: /vagrant => C:/Users/NB/Kubernetes/vagrant
==> node2: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==> node2: flag to force provisioning. Provisioners marked to run always will still run.
==> node3: Checking if box 'shekeriev/debian-11' version '0.5' is up to date...
==> node3: Clearing any previously set forwarded ports...
==> node3: Fixed port collision for 22 => 2222. Now on port 2201.
==> node3: Clearing any previously set network interfaces...
==> node3: Preparing network interfaces based on configuration...
    node3: Adapter 1: nat
    node3: Adapter 2: hostonly
==> node3: Forwarding ports...
    node3: 22 (guest) => 2201 (host) (adapter 1)
==> node3: Running 'pre-boot' VM customizations...
==> node3: Booting VM...
==> node3: Waiting for machine to boot. This may take a few minutes...
    node3: SSH address: 127.0.0.1:2201
    node3: SSH username: vagrant
    node3: SSH auth method: private key
==> node3: Machine booted and ready!
==> node3: Checking for guest additions in VM...
==> node3: Setting hostname...
==> node3: Configuring and enabling network interfaces...
==> node3: Mounting shared folders...
    node3: /vagrant => C:/Users/NB/Kubernetes/vagrant
==> node3: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==> node3: flag to force provisioning. Provisioners marked to run always will still run.
PS C:\Users\NB\Kubernetes> vagrant ssh node1
Linux node1 5.10.0-26-amd64 #1 SMP Debian 5.10.197-1 (2023-09-29) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Nov 11 16:05:07 2023 from 10.0.2.2
Linux node1 5.10.0-26-amd64 #1 SMP Debian 5.10.197-1 (2023-09-29) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sat Nov 11 16:05:07 2023 from 10.0.2.2
vagrant@node1:~$ kubectl version --short
Flag --short has been deprecated, and will be removed in the future. The --short output will become the default.
Client Version: v1.27.5
Kustomize Version: v5.0.1
Server Version: v1.27.5
vagrant@node1:~$ uname -a
Linux node1 5.10.0-26-amd64 #1 SMP Debian 5.10.197-1 (2023-09-29) x86_64 GNU/Linux
vagrant@node1:~$ openssl genrsa -out main.key 4096
Generating RSA private key, 4096 bit long modulus (2 primes)
.................................................................................................................................++++
..................................................................................++++
e is 65537 (0x010001)
vagrant@node1:~$ openssl req -new -x509 -key main.key -out main.crt -days 365 -subj /CN=www.hw.lab
vagrant@node1:~$ cat main.key
-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
vagrant@node1:~$ cat main.crt
-----BEGIN CERTIFICATE-----
MIIFCzCCAvOgAwIBAgIUEV7aQ5B7TFcKEAvRD7l6t2dXpOwwDQYJKoZIhvcNAQEL
BQAwFTETMBEGA1UEAwwKd3d3Lmh3LmxhYjAeFw0yMzExMTIwODIyNTBaFw0yNDEx
MTEwODIyNTBaMBUxEzARBgNVBAMMCnd3dy5ody5sYWIwggIiMA0GCSqGSIb3DQEB
AQUAA4ICDwAwggIKAoICAQDCBdjQ4VJtdNOkn/8kt+AST0y7paFtdU6ej687AJhA
mPaST30mzqoFCVNu4hCgUZ1kdJskOfSr3kluuuP33NYzflqiLQnnBJIfbLRgIFKj
h/b4vIpgdw6UGQS2QdA3SPDAjBf197Q5gtSGHXsWPCuTcnAWl1D0HEa1cbQprCRd
SuQ1wFEp+7aXlBUSBE2J1a4Bx7vHo+riKJtWwbgCVG5tVB85VshDp+KsKQBbixKV
4fdxq9A8lRW2+r7luKk//ZnJH1IqSxkI8DOXiOxMh1yakIXiLcjltz0fzb2uj01m
1HgYHFY8zw2cRtXJDwIyLWjM3rlXWEhx1SCP/dBnG8speMjD8urRxBP4rN6xeryT
h6AiAOvp+5LcfiaB/Y1Bl3Yx5PVe4BVJKXnvcoQZL29GGWDyyqwhwakZKSygIWLZ
iwcUFhh7FX9dtY3d+aa+7qHGBjuaBEO0W2FTrhiUEbJk+ZrDjJnBW3u2/Bdu+Ilp
NdPUm1pnF1ljd5Z/BSP9TP0Iprlk7ZTRa4sDzRA89aql4fZKsZpIlX1mtDvzbjQS
dXtlwWeDhwvP9XxjPbYlLFtiPtV5bmyb6qu2l8fYXkUhmIXZTqdHZ/s+okVZo7Nj
J2QmjKAfke9Cpa1KrRYl9Rt23r5l6T24po2XIRPOZQKhcvI5CKihDKF2E4AfN491
LQIDAQABo1MwUTAdBgNVHQ4EFgQUoUSOIdYwv0GVmjsR86YA77tDCkgwHwYDVR0j
BBgwFoAUoUSOIdYwv0GVmjsR86YA77tDCkgwDwYDVR0TAQH/BAUwAwEB/zANBgkq
hkiG9w0BAQsFAAOCAgEAie4uYEgeDmJ3HJppB6AXPfu5IdcCjOdOjC62PydhJdO6
g01Lu1dODa3BKAc/qm4oiXuMlepHoEv2doqz/in4j0MoQiPmh4h0cTt53NFqh2BA
LyxqkgnF2SkEwGf6whm8pps12iR/DU4wBKGsGKZNrhJnf3R8J29AfHcXtlpeBLu/
6pUzph8X8ZV9fIywzX+AsFOTuqumDDbZ+dlZEGDWbm86H4J0re0hgkeboBAXnOEv
94aucBEXtTmwJxz2l58j73rgod+ZjZoyEGEajHXs6GKYltcXQUZBBFD9S7zXjdWC
pnuH/WrOtBhRJgBHyXy/hH83Mtq2F57kNRZczXo6c7oFrUy7qrHoq7hozmV5c7cH
y0ZTPKsI8HQ6oGvIjdm5EEUB80B0NcFVLsukv0B/9u2Zl850bss0VaSi2JnIOnNm
zu6XIh/kJ4oX4bvWhss7aZiQZtTIYYLZnwOOH4fbDxXeJaTspdtSmh8XozcCnB1u
pAQJ+wlqKV2ujYNzVVPgsVj+tDt11Z6c5eJRiZNEBWLjzBZkKzZgXvGKu0Nh4fau
UxhSWiR7Ud4D7POeQUB5aejY4elT6/DAe+XvNE4k0FBG9PnR9LD5DmcNZPNl7Yrg
N/5+0hczTIzTnZJgGkkAuIMyg3nR49oBmcqLgvuBxEjsSZksJqH0wUl8PjyIlbU=
-----END CERTIFICATE-----
vagrant@node1:~$ cat > hwcm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hwcm
data:
  k8sver: "v1.27.5"
  k8sos: "Debian 5.10.197-1"
  main.conf: |
    name=homework
    path=/tmp
    certs=/secret
  port.conf: |
    8080vagrant@node1:~$
vagrant@node1:~$ cat hwcm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hwcm
data:
  k8sver: "v1.27.5"
  k8sos: "Debian 5.10.197-1"
  main.conf: |
    name=homework
    path=/tmp
    certs=/secret
  port.conf: |
    8080vagrant@node1:~$
vagrant@node1:~$ cat > hwpod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: hwpod
spec:
  containers:
  - name: k8s-environ-container
    image: shekeriev/k8s-environ
    volumeMounts:
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /secret
    env:
    - name: HW_k8sver
      valueFrom:
        configMapKeyRef:
          name: hwcm
          key: k8sver
    - name: HW_k8sos
      valueFrom:
        configMapKeyRef:
          name: hwcm
          key: k8sos
    - name: HW_PORT
      valueFrom:
        configMapKeyRef:
          name: hwcm
          key: port.conf
  volumes:
  - name: config-volume
    configMap:
      name: hwcm
  - name: secret-volume
    secret:
      secretName: hwsecvagrant@node1:~$
vagrant@node1:~$ cat hwpod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: hwpod
spec:
  containers:
  - name: k8s-environ-container
    image: shekeriev/k8s-environ
    volumeMounts:
    - name: config-volume
      mountPath: /config
    - name: secret-volume
      mountPath: /secret
    env:
    - name: HW_k8sver
      valueFrom:
        configMapKeyRef:
          name: hwcm
          key: k8sver
    - name: HW_k8sos
      valueFrom:
        configMapKeyRef:
          name: hwcm
          key: k8sos
    - name: HW_PORT
      valueFrom:
        configMapKeyRef:
          name: hwcm
          key: port.conf
  volumes:
  - name: config-volume
    configMap:
      name: hwcm
  - name: secret-volume
    secret:
      secretName: hwsecvagrant@node1:~$
vagrant@node1:~$ cat > hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: base64 main.key
  main.crt: base64 main.crtvagrant@node1:~$
vagrant@node1:~$ cat hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: base64 main.key
  main.crt: base64 main.crtvagrant@node1:~$
vagrant@node1:~$ kubectl apply -f hwcm.yaml
configmap/hwcm created
vagrant@node1:~$ kubectl apply -f hwsec.yaml
Error from server (BadRequest): error when creating "hwsec.yaml": Secret in version "v1" cannot be handled as a Secret: illegal base64 data at input byte 6
vagrant@node1:~$ cat > hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: main.key
  main.crt: main.crtvagrant@node1:~$
vagrant@node1:~$ cat hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: main.key
  main.crt: main.crtvagrant@node1:~$
vagrant@node1:~$ kubectl apply -f hwsec.yaml
Error from server (BadRequest): error when creating "hwsec.yaml": Secret in version "v1" cannot be handled as a Secret: illegal base64 data at input byte 4
vagrant@node1:~$ base64 main.key
LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBd2dYWTBPRlNi
WFRUcEovL0pMZmdFazlNdTZXaGJYVk9ubyt2T3dDWVFKajJrazk5CkpzNnFCUWxUYnVJUW9GR2Ra
SFNiSkRuMHE5NUpicnJqOTl6V00zNWFvaTBKNXdTU0gyeTBZQ0JTbzRmMitMeUsKWUhjT2xCa0V0
a0hRTjBqd3dJd1g5ZmUwT1lMVWhoMTdGandyazNKd0ZwZFE5QnhHdFhHMEthd2tYVXJrTmNCUgpL
ZnUybDVRVkVnUk5pZFd1QWNlN3g2UHE0aWliVnNHNEFsUnViVlFmT1ZiSVE2ZmlyQ2tBVzRzU2xl
SDNjYXZRClBKVVZ0dnErNWJpcFAvMlp5UjlTS2tzWkNQQXpsNGpzVElkY21wQ0Y0aTNJNWJjOUg4
MjlybzlOWnRSNEdCeFcKUE04Tm5FYlZ5UThDTWkxb3pONjVWMWhJY2RVZ2ovM1FaeHZMS1hqSXcv
THEwY1FUK0t6ZXNYcThrNGVnSWdEcgo2ZnVTM0g0bWdmMk5RWmQyTWVUMVh1QVZTU2w1NzNLRUdT
OXZSaGxnOHNxc0ljR3BHU2tzb0NGaTJZc0hGQllZCmV4Vi9YYldOM2ZtbXZ1Nmh4Z1k3bWdSRHRG
dGhVNjRZbEJHeVpQbWF3NHlad1Z0N3R2d1hidmlKYVRYVDFKdGEKWnhkWlkzZVdmd1VqL1V6OUNL
YTVaTzJVMFd1TEE4MFFQUFdxcGVIMlNyR2FTSlY5WnJRNzgyNDBFblY3WmNGbgpnNGNMei9WOFl6
MjJKU3hiWWo3VmVXNXNtK3FydHBmSDJGNUZJWmlGMlU2blIyZjdQcUpGV2FPell5ZGtKb3lnCkg1
SHZRcVd0U3EwV0pmVWJkdDYrWmVrOXVLYU5seUVUem1VQ29YTHlPUWlvb1F5aGRoT0FIemVQZFMw
Q0F3RUEKQVFLQ0FnQjlPNExueUJnSkdGZ25NVEpoUStINFQ0RUt1V3pKbHVjSkIxc21iVXJZbnlL
LzYxaXZmTU5XL3Q4QQplaUFiS3JLNWpWNDU4c0tQVUtuN005eEROeUozR0Q1dDRUNDhBOEpCVUV2
WW8rUlRNMFpnNUdrNHZJQUhiV0tTCk5VYXMrSUtVOVpmZHBtV0luWDZKbG12RlBVOHZHN1ZuajRH
c0hyZ3hFMVFqZGIzL0RZRGhoT0dlaEo4bGxXcEkKTjhqSWg4aUowNTdMekd5bVQybDhoUXM5VGJ2
OUMwZ2dIWGlqMnJBL1NUTzI0cnc3VENBSUdjc04zM2lsbzVFbAorNXdhOXBpVnJZYStUN3kzL1Rw
L3U5d3h4VWtyWnM5VDN4T0YybEUwdnZxSXVteE9UQ084QkVaUmQ1K2tXRUJUClIwRzJtNExDZ1p3
RjJiRGc4SnpVOUJIWkM2S0VYOW5OeDVqbXdjU0JPYWJsdHBnU1RtblRteHlHanhOSjFqZnIKSFFJ
bEQvaWdqM3VoNTFObkgyMXEwd1lXUEI1bGNPUm1mT2NpYVlRcEJpRnRGRkdHVUU1c2QvWHA0b2ZK
clg4bwo4ZWdCc3ZXcUkwaitoU0NsTzlzSEFURUFoSzFIZTlaVUFISHJuSWhQV0c5ZlRZSzdIb3hK
OGZyMGFJOXpOY1F5CkZIR1pSdHBaVDdKTkZCVmpNZ3A3QUdjWlUyMzVlRWRKNDA1WHU3a1c4c0Fn
VmNVUUVGdUxDNUhHQmZNOHhpK3IKSVlwdk5TaTVsZVYvVmJGbDBpQjFUSlRZVjFEZG9kbTdCRGo3
T0hZWG5FTUt0aG1GS29lRm12V1NEQVZHMzY5cgplZE9XZVdNdkhBMGxuWTN1UUN6OTIzOURtUW9r
ZUZ5SCtrQVhNekpNL0tzSzNVeEFyUUtDQVFFQStCM1l1bWpRCjI3a1VwOEhWN3Y5ODVHSWRnUlgx
VkxZZ2c2OGlqejY5aG11TkFjb1NlU0RzVitmb09VcEhHVGJvL2NHTGlaL1IKT05JeGRWZnVRcG5V
R1lhcEU0N3JzMG9LTVpzMSszdnRmY1NtSTZnZFZFOFh0cmVyV0gwNXpDMmZzclExUXF0WQpOeS81
Vmd4cjdDR3gzVG9ySXFJK051d1BLL2JYeGU2a201OWhieGJFYkwvRFJSdDZqWHE0dTZhWVYwUTM1
dUwwClRNY2JpcHpFVHowV3AxenJwTllYZUJLbjdoQU9KZWJSL1RnNEpUaXVhTUtJbmVROUVFTDI3
ZnkrODJRd25oVFEKRTRzTUsxcGZ2ektTQTVYbGo3VXhEV2lML2ZuZWo2WUh2cERhU0RCVXJ2ZGpp
bjJ4SVo3QnZRRlN1QSt0K1ZLVwptUVgvRWIra3NmRVJEd0tDQVFFQXlEQUI5aEtHcVhUWFZaVnFK
Snd0MGNZMWFyNkV6MGNNUnd4UU1WYXhCLzcwCmFJSTh1bVBINEk3QXJKeDlISDM4cm9oZUhTczdU
b09nelpkRjdMYUYzdnpQTnVJNGl1N3NjY0hIVjFMYWhtSEwKQUh2UU51WW0yOWVSWDA3VnB5UjhC
TFpsWXJiUzhCR1lZRytuOGNJeG4xTndiK2lROG84dlQ2YllCdkkxY0I5NApJaThKcFdPRlJEVHZo
bzlLY0xGUCtMbmVBUDV4eVZickRjbndvdFVoWnlGNTdlcFNCL1VqdkZRMUxpVFZVZU00CjA1ZUZQ
akpMTXFWQ3pWYXMwcHk3QXBOK3o2UjJNZ21lR0VaY0IxOWxuYlhXL2g3M010TDJLMjRZNDJOWXhX
UkwKVnlMSnNrWWRvemVMUSsxajVleGUvUU4vNXM1ci9OOW9kdUswYVh1ZUF3S0NBUUEyUkdEb3RK
QXAzcHN6N2VOYQp1S3FhVVJOZTdteVFNSjEvNzhoQlNGbXZrc3B1ZjhIMm1FclpGekhsaGVkekRs
MTdVdCt3SkRKZ21TaVVINzFPCjk5STZHd2ZUN1VpRUdFZU9mZ0lhbFFwbW5hSXczazQ3NkdpcFlC
YXI3Z2U4THFabE1hRU1pZWxyZUtTeU8xbEgKZGo4dXdkQTViUDdxaUVyeE5MWVE1cGMrS21mbklq
V29DM0VzSmt4eHNVdkNUemUycm9jRGl0UWdEdFJwUnN4eApBRTE2SVlxd3JOckpPbHRjYUVxUDQ2
SStIaE81b0dJVks2Y3gwWC9CbE1QcFhZUnVPNVdlbmJLODg0YWYzTTVnClJURkdjM3lZSitzb29a
c3MyMy9nTDFJMlRmeFFHYklMNnJQczBIenplNE9vVVNmRWRqbDQ5S1ZYcHNZWkhhOXAKOCszbEFv
SUJBUURFWk16WHc4OFcya2tUYm5WbW0wNGNXaTgzbk5lZ25wdzk2NmVVNys3WDRGbVpXZ1FIL0RJ
dwpiUHc3bTM3bWYvZHdwdHBtRlc2bWxWNGh0SUhtUEI3VDZBUEdYV09KY2VMSHE0dE1jVDF2enVz
Z2UxZUhOSDMwCitlUmxzMnJLQW5JbEVXZ2YweXJZV1BxN3lXN2pNRmdNYmdpRjBZeTZXcHpZc04r
STJRQnlFbjJDVTlGTHozb0QKczBjMkpNZXNEVmhldE1KSENWbEtaSnBQdWNqNWhzeXhaOWMrQUw4
ZmpYRFVwMnhRNjlQWDlXcGZzMndGMjhPSQpXVGRUU2ZCYzQyUlluNmt1UHJPeVhWc2JoNU5yckR4
OTM5S2ZGblFBQ1pWMmdCbXNvMStJcjk5MkNld0VtT01rCnFDNVpvc0I1NWs0K1BMdXpETnBHaUVy
dEwzWTljZ2hQQW9JQkFDZmNzR3E3aUdFMlQyVElZczRxTnMyWFVrcXQKRTJaQ0llcUFjWExRcmlO
MnNNbVhHbFBQU0oyZE9IdmQ3UU5pM1U5SUQ5aXR5SFY4Qlk3b0J4b3JGUkE2ekl6ZwpjOXBPOHQ2
TlZSVWUrd25MNWhWdmh0TWhxZmJuNVgvd3RQNnpzVGI5R0gzc0hOVWFTL3F4TmFjY2dTY3VSRGVs
ClNXb3YvWWJJWVBmbERDU01uaENKb3hzeUhBeTlrOGxsclFNRENacjFaV29MVnRCRDBxUXZBNDcv
NW0wUVk0cFoKRGljNk5NQlVFV1J1aG1TRldKRmxhLzJoRkVUcG9HNGdBdHZvdGo1cHF2ZWlubHFS
Q3pQakJTNDQyd1VlNWxKMwpLRU9DcnVBVVJqUE1mMWFhYndWMEwzZ3BFUFd5ZWsxOWZQNllRZmRn
cG5KRThtUGt5VThONGdpTkgwZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
vagrant@node1:~$ base64 main.crt
LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZDekNDQXZPZ0F3SUJBZ0lVRVY3YVE1QjdU
RmNLRUF2UkQ3bDZ0MmRYcE93d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZURVRNQkVHQTFVRUF3d0tk
M2QzTG1oM0xteGhZakFlRncweU16RXhNVEl3T0RJeU5UQmFGdzB5TkRFeApNVEV3T0RJeU5UQmFN
QlV4RXpBUkJnTlZCQU1NQ25kM2R5NW9keTVzWVdJd2dnSWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFB
NElDRHdBd2dnSUtBb0lDQVFEQ0JkalE0Vkp0ZE5Pa24vOGt0K0FTVDB5N3BhRnRkVTZlajY4N0FK
aEEKbVBhU1QzMG16cW9GQ1ZOdTRoQ2dVWjFrZEpza09mU3Iza2x1dXVQMzNOWXpmbHFpTFFubkJK
SWZiTFJnSUZLagpoL2I0dklwZ2R3NlVHUVMyUWRBM1NQREFqQmYxOTdRNWd0U0dIWHNXUEN1VGNu
QVdsMUQwSEVhMWNiUXByQ1JkClN1UTF3RkVwKzdhWGxCVVNCRTJKMWE0Qng3dkhvK3JpS0p0V3di
Z0NWRzV0VkI4NVZzaERwK0tzS1FCYml4S1YKNGZkeHE5QThsUlcyK3I3bHVLay8vWm5KSDFJcVN4
a0k4RE9YaU94TWgxeWFrSVhpTGNqbHR6MGZ6YjJ1ajAxbQoxSGdZSEZZOHp3MmNSdFhKRHdJeUxX
ak0zcmxYV0VoeDFTQ1AvZEJuRzhzcGVNakQ4dXJSeEJQNHJONnhlcnlUCmg2QWlBT3ZwKzVMY2Zp
YUIvWTFCbDNZeDVQVmU0QlZKS1hudmNvUVpMMjlHR1dEeXlxd2h3YWtaS1N5Z0lXTFoKaXdjVUZo
aDdGWDlkdFkzZCthYSs3cUhHQmp1YUJFTzBXMkZUcmhpVUViSmsrWnJEakpuQlczdTIvQmR1K0ls
cApOZFBVbTFwbkYxbGpkNVovQlNQOVRQMElwcmxrN1pUUmE0c0R6UkE4OWFxbDRmWktzWnBJbFgx
bXREdnpialFTCmRYdGx3V2VEaHd2UDlYeGpQYllsTEZ0aVB0VjVibXliNnF1Mmw4ZllYa1VobUlY
WlRxZEhaL3Mrb2tWWm83TmoKSjJRbWpLQWZrZTlDcGExS3JSWWw5UnQyM3I1bDZUMjRwbzJYSVJQ
T1pRS2hjdkk1Q0tpaERLRjJFNEFmTjQ5MQpMUUlEQVFBQm8xTXdVVEFkQmdOVkhRNEVGZ1FVb1VT
T0lkWXd2MEdWbWpzUjg2WUE3N3REQ2tnd0h3WURWUjBqCkJCZ3dGb0FVb1VTT0lkWXd2MEdWbWpz
Ujg2WUE3N3REQ2tnd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3EKaGtpRzl3MEJBUXNGQUFP
Q0FnRUFpZTR1WUVnZURtSjNISnBwQjZBWFBmdTVJZGNDak9kT2pDNjJQeWRoSmRPNgpnMDFMdTFk
T0RhM0JLQWMvcW00b2lYdU1sZXBIb0V2MmRvcXovaW40ajBNb1FpUG1oNGgwY1R0NTNORnFoMkJB
Ckx5eHFrZ25GMlNrRXdHZjZ3aG04cHBzMTJpUi9EVTR3QktHc0dLWk5yaEpuZjNSOEoyOUFmSGNY
dGxwZUJMdS8KNnBVenBoOFg4WlY5Zkl5d3pYK0FzRk9UdXF1bUREYlorZGxaRUdEV2JtODZINEow
cmUwaGdrZWJvQkFYbk9Fdgo5NGF1Y0JFWHRUbXdKeHoybDU4ajczcmdvZCtaalpveUVHRWFqSFhz
NkdLWWx0Y1hRVVpCQkZEOVM3elhqZFdDCnBudUgvV3JPdEJoUkpnQkh5WHkvaEg4M010cTJGNTdr
TlJaY3pYbzZjN29GclV5N3FySG9xN2hvem1WNWM3Y0gKeTBaVFBLc0k4SFE2b0d2SWpkbTVFRVVC
ODBCME5jRlZMc3VrdjBCLzl1MlpsODUwYnNzMFZhU2kySm5JT25ObQp6dTZYSWgva0o0b1g0YnZX
aHNzN2FaaVFadFRJWVlMWm53T09INGZiRHhYZUphVHNwZHRTbWg4WG96Y0NuQjF1CnBBUUord2xx
S1YydWpZTnpWVlBnc1ZqK3REdDExWjZjNWVKUmlaTkVCV0xqekJaa0t6WmdYdkdLdTBOaDRmYXUK
VXhoU1dpUjdVZDREN1BPZVFVQjVhZWpZNGVsVDYvREFlK1h2TkU0azBGQkc5UG5SOUxENURtY05a
UE5sN1lyZwpOLzUrMGhjelRJelRuWkpnR2trQXVJTXlnM25SNDlvQm1jcUxndnVCeEVqc1Naa3NK
cUgwd1VsOFBqeUlsYlU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
vagrant@node1:~$ kubectl apply -f hwsec.yaml
Error from server (BadRequest): error when creating "hwsec.yaml": Secret in version "v1" cannot be handled as a Secret: illegal base64 data at input byte 4
vagrant@node1:~$ cat > hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBd2dYWTBPRlNi
WFRUcEovL0pMZmdFazlNdTZXaGJYVk9ubyt2T3dDWVFKajJrazk5CkpzNnFCUWxUYnVJUW9GR2Ra
SFNiSkRuMHE5NUpicnJqOTl6V00zNWFvaTBKNXdTU0gyeTBZQ0JTbzRmMitMeUsKWUhjT2xCa0V0
a0hRTjBqd3dJd1g5ZmUwT1lMVWhoMTdGandyazNKd0ZwZFE5QnhHdFhHMEthd2tYVXJrTmNCUgpL
ZnUybDVRVkVnUk5pZFd1QWNlN3g2UHE0aWliVnNHNEFsUnViVlFmT1ZiSVE2ZmlyQ2tBVzRzU2xl
SDNjYXZRClBKVVZ0dnErNWJpcFAvMlp5UjlTS2tzWkNQQXpsNGpzVElkY21wQ0Y0aTNJNWJjOUg4
MjlybzlOWnRSNEdCeFcKUE04Tm5FYlZ5UThDTWkxb3pONjVWMWhJY2RVZ2ovM1FaeHZMS1hqSXcv
THEwY1FUK0t6ZXNYcThrNGVnSWdEcgo2ZnVTM0g0bWdmMk5RWmQyTWVUMVh1QVZTU2w1NzNLRUdT
OXZSaGxnOHNxc0ljR3BHU2tzb0NGaTJZc0hGQllZCmV4Vi9YYldOM2ZtbXZ1Nmh4Z1k3bWdSRHRG
dGhVNjRZbEJHeVpQbWF3NHlad1Z0N3R2d1hidmlKYVRYVDFKdGEKWnhkWlkzZVdmd1VqL1V6OUNL
YTVaTzJVMFd1TEE4MFFQUFdxcGVIMlNyR2FTSlY5WnJRNzgyNDBFblY3WmNGbgpnNGNMei9WOFl6
MjJKU3hiWWo3VmVXNXNtK3FydHBmSDJGNUZJWmlGMlU2blIyZjdQcUpGV2FPell5ZGtKb3lnCkg1
SHZRcVd0U3EwV0pmVWJkdDYrWmVrOXVLYU5seUVUem1VQ29YTHlPUWlvb1F5aGRoT0FIemVQZFMw
Q0F3RUEKQVFLQ0FnQjlPNExueUJnSkdGZ25NVEpoUStINFQ0RUt1V3pKbHVjSkIxc21iVXJZbnlL
LzYxaXZmTU5XL3Q4QQplaUFiS3JLNWpWNDU4c0tQVUtuN005eEROeUozR0Q1dDRUNDhBOEpCVUV2
WW8rUlRNMFpnNUdrNHZJQUhiV0tTCk5VYXMrSUtVOVpmZHBtV0luWDZKbG12RlBVOHZHN1ZuajRH
c0hyZ3hFMVFqZGIzL0RZRGhoT0dlaEo4bGxXcEkKTjhqSWg4aUowNTdMekd5bVQybDhoUXM5VGJ2
OUMwZ2dIWGlqMnJBL1NUTzI0cnc3VENBSUdjc04zM2lsbzVFbAorNXdhOXBpVnJZYStUN3kzL1Rw
L3U5d3h4VWtyWnM5VDN4T0YybEUwdnZxSXVteE9UQ084QkVaUmQ1K2tXRUJUClIwRzJtNExDZ1p3
RjJiRGc4SnpVOUJIWkM2S0VYOW5OeDVqbXdjU0JPYWJsdHBnU1RtblRteHlHanhOSjFqZnIKSFFJ
bEQvaWdqM3VoNTFObkgyMXEwd1lXUEI1bGNPUm1mT2NpYVlRcEJpRnRGRkdHVUU1c2QvWHA0b2ZK
clg4bwo4ZWdCc3ZXcUkwaitoU0NsTzlzSEFURUFoSzFIZTlaVUFISHJuSWhQV0c5ZlRZSzdIb3hK
OGZyMGFJOXpOY1F5CkZIR1pSdHBaVDdKTkZCVmpNZ3A3QUdjWlUyMzVlRWRKNDA1WHU3a1c4c0Fn
VmNVUUVGdUxDNUhHQmZNOHhpK3IKSVlwdk5TaTVsZVYvVmJGbDBpQjFUSlRZVjFEZG9kbTdCRGo3
T0hZWG5FTUt0aG1GS29lRm12V1NEQVZHMzY5cgplZE9XZVdNdkhBMGxuWTN1UUN6OTIzOURtUW9r
ZUZ5SCtrQVhNekpNL0tzSzNVeEFyUUtDQVFFQStCM1l1bWpRCjI3a1VwOEhWN3Y5ODVHSWRnUlgx
VkxZZ2c2OGlqejY5aG11TkFjb1NlU0RzVitmb09VcEhHVGJvL2NHTGlaL1IKT05JeGRWZnVRcG5V
R1lhcEU0N3JzMG9LTVpzMSszdnRmY1NtSTZnZFZFOFh0cmVyV0gwNXpDMmZzclExUXF0WQpOeS81
Vmd4cjdDR3gzVG9ySXFJK051d1BLL2JYeGU2a201OWhieGJFYkwvRFJSdDZqWHE0dTZhWVYwUTM1
dUwwClRNY2JpcHpFVHowV3AxenJwTllYZUJLbjdoQU9KZWJSL1RnNEpUaXVhTUtJbmVROUVFTDI3
ZnkrODJRd25oVFEKRTRzTUsxcGZ2ektTQTVYbGo3VXhEV2lML2ZuZWo2WUh2cERhU0RCVXJ2ZGpp
bjJ4SVo3QnZRRlN1QSt0K1ZLVwptUVgvRWIra3NmRVJEd0tDQVFFQXlEQUI5aEtHcVhUWFZaVnFK
Snd0MGNZMWFyNkV6MGNNUnd4UU1WYXhCLzcwCmFJSTh1bVBINEk3QXJKeDlISDM4cm9oZUhTczdU
b09nelpkRjdMYUYzdnpQTnVJNGl1N3NjY0hIVjFMYWhtSEwKQUh2UU51WW0yOWVSWDA3VnB5UjhC
TFpsWXJiUzhCR1lZRytuOGNJeG4xTndiK2lROG84dlQ2YllCdkkxY0I5NApJaThKcFdPRlJEVHZo
bzlLY0xGUCtMbmVBUDV4eVZickRjbndvdFVoWnlGNTdlcFNCL1VqdkZRMUxpVFZVZU00CjA1ZUZQ
akpMTXFWQ3pWYXMwcHk3QXBOK3o2UjJNZ21lR0VaY0IxOWxuYlhXL2g3M010TDJLMjRZNDJOWXhX
UkwKVnlMSnNrWWRvemVMUSsxajVleGUvUU4vNXM1ci9OOW9kdUswYVh1ZUF3S0NBUUEyUkdEb3RK
QXAzcHN6N2VOYQp1S3FhVVJOZTdteVFNSjEvNzhoQlNGbXZrc3B1ZjhIMm1FclpGekhsaGVkekRs
MTdVdCt3SkRKZ21TaVVINzFPCjk5STZHd2ZUN1VpRUdFZU9mZ0lhbFFwbW5hSXczazQ3NkdpcFlC
YXI3Z2U4THFabE1hRU1pZWxyZUtTeU8xbEgKZGo4dXdkQTViUDdxaUVyeE5MWVE1cGMrS21mbklq
V29DM0VzSmt4eHNVdkNUemUycm9jRGl0UWdEdFJwUnN4eApBRTE2SVlxd3JOckpPbHRjYUVxUDQ2
SStIaE81b0dJVks2Y3gwWC9CbE1QcFhZUnVPNVdlbmJLODg0YWYzTTVnClJURkdjM3lZSitzb29a
c3MyMy9nTDFJMlRmeFFHYklMNnJQczBIenplNE9vVVNmRWRqbDQ5S1ZYcHNZWkhhOXAKOCszbEFv
SUJBUURFWk16WHc4OFcya2tUYm5WbW0wNGNXaTgzbk5lZ25wdzk2NmVVNys3WDRGbVpXZ1FIL0RJ
dwpiUHc3bTM3bWYvZHdwdHBtRlc2bWxWNGh0SUhtUEI3VDZBUEdYV09KY2VMSHE0dE1jVDF2enVz
Z2UxZUhOSDMwCitlUmxzMnJLQW5JbEVXZ2YweXJZV1BxN3lXN2pNRmdNYmdpRjBZeTZXcHpZc04r
STJRQnlFbjJDVTlGTHozb0QKczBjMkpNZXNEVmhldE1KSENWbEtaSnBQdWNqNWhzeXhaOWMrQUw4
ZmpYRFVwMnhRNjlQWDlXcGZzMndGMjhPSQpXVGRUU2ZCYzQyUlluNmt1UHJPeVhWc2JoNU5yckR4
OTM5S2ZGblFBQ1pWMmdCbXNvMStJcjk5MkNld0VtT01rCnFDNVpvc0I1NWs0K1BMdXpETnBHaUVy
dEwzWTljZ2hQQW9JQkFDZmNzR3E3aUdFMlQyVElZczRxTnMyWFVrcXQKRTJaQ0llcUFjWExRcmlO
MnNNbVhHbFBQU0oyZE9IdmQ3UU5pM1U5SUQ5aXR5SFY4Qlk3b0J4b3JGUkE2ekl6ZwpjOXBPOHQ2
TlZSVWUrd25MNWhWdmh0TWhxZmJuNVgvd3RQNnpzVGI5R0gzc0hOVWFTL3F4TmFjY2dTY3VSRGVs
ClNXb3YvWWJJWVBmbERDU01uaENKb3hzeUhBeTlrOGxsclFNRENacjFaV29MVnRCRDBxUXZBNDcv
NW0wUVk0cFoKRGljNk5NQlVFV1J1aG1TRldKRmxhLzJoRkVUcG9HNGdBdHZvdGo1cHF2ZWlubHFS
Q3pQakJTNDQyd1VlNWxKMwpLRU9DcnVBVVJqUE1mMWFhYndWMEwzZ3BFUFd5ZWsxOWZQNllRZmRn
cG5KRThtUGt5VThONGdpTkgwZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  main.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZDekNDQXZPZ0F3SUJBZ0lVRVY3YVE1QjdU
RmNLRUF2UkQ3bDZ0MmRYcE93d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZURVRNQkVHQTFVRUF3d0tk
M2QzTG1oM0xteGhZakFlRncweU16RXhNVEl3T0RJeU5UQmFGdzB5TkRFeApNVEV3T0RJeU5UQmFN
QlV4RXpBUkJnTlZCQU1NQ25kM2R5NW9keTVzWVdJd2dnSWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFB
NElDRHdBd2dnSUtBb0lDQVFEQ0JkalE0Vkp0ZE5Pa24vOGt0K0FTVDB5N3BhRnRkVTZlajY4N0FK
aEEKbVBhU1QzMG16cW9GQ1ZOdTRoQ2dVWjFrZEpza09mU3Iza2x1dXVQMzNOWXpmbHFpTFFubkJK
SWZiTFJnSUZLagpoL2I0dklwZ2R3NlVHUVMyUWRBM1NQREFqQmYxOTdRNWd0U0dIWHNXUEN1VGNu
QVdsMUQwSEVhMWNiUXByQ1JkClN1UTF3RkVwKzdhWGxCVVNCRTJKMWE0Qng3dkhvK3JpS0p0V3di
Z0NWRzV0VkI4NVZzaERwK0tzS1FCYml4S1YKNGZkeHE5QThsUlcyK3I3bHVLay8vWm5KSDFJcVN4
a0k4RE9YaU94TWgxeWFrSVhpTGNqbHR6MGZ6YjJ1ajAxbQoxSGdZSEZZOHp3MmNSdFhKRHdJeUxX
ak0zcmxYV0VoeDFTQ1AvZEJuRzhzcGVNakQ4dXJSeEJQNHJONnhlcnlUCmg2QWlBT3ZwKzVMY2Zp
YUIvWTFCbDNZeDVQVmU0QlZKS1hudmNvUVpMMjlHR1dEeXlxd2h3YWtaS1N5Z0lXTFoKaXdjVUZo
aDdGWDlkdFkzZCthYSs3cUhHQmp1YUJFTzBXMkZUcmhpVUViSmsrWnJEakpuQlczdTIvQmR1K0ls
cApOZFBVbTFwbkYxbGpkNVovQlNQOVRQMElwcmxrN1pUUmE0c0R6UkE4OWFxbDRmWktzWnBJbFgx
bXREdnpialFTCmRYdGx3V2VEaHd2UDlYeGpQYllsTEZ0aVB0VjVibXliNnF1Mmw4ZllYa1VobUlY
WlRxZEhaL3Mrb2tWWm83TmoKSjJRbWpLQWZrZTlDcGExS3JSWWw5UnQyM3I1bDZUMjRwbzJYSVJQ
T1pRS2hjdkk1Q0tpaERLRjJFNEFmTjQ5MQpMUUlEQVFBQm8xTXdVVEFkQmdOVkhRNEVGZ1FVb1VT
T0lkWXd2MEdWbWpzUjg2WUE3N3REQ2tnd0h3WURWUjBqCkJCZ3dGb0FVb1VTT0lkWXd2MEdWbWpz
Ujg2WUE3N3REQ2tnd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3EKaGtpRzl3MEJBUXNGQUFP
Q0FnRUFpZTR1WUVnZURtSjNISnBwQjZBWFBmdTVJZGNDak9kT2pDNjJQeWRoSmRPNgpnMDFMdTFk
T0RhM0JLQWMvcW00b2lYdU1sZXBIb0V2MmRvcXovaW40ajBNb1FpUG1oNGgwY1R0NTNORnFoMkJB
Ckx5eHFrZ25GMlNrRXdHZjZ3aG04cHBzMTJpUi9EVTR3QktHc0dLWk5yaEpuZjNSOEoyOUFmSGNY
dGxwZUJMdS8KNnBVenBoOFg4WlY5Zkl5d3pYK0FzRk9UdXF1bUREYlorZGxaRUdEV2JtODZINEow
cmUwaGdrZWJvQkFYbk9Fdgo5NGF1Y0JFWHRUbXdKeHoybDU4ajczcmdvZCtaalpveUVHRWFqSFhz
NkdLWWx0Y1hRVVpCQkZEOVM3elhqZFdDCnBudUgvV3JPdEJoUkpnQkh5WHkvaEg4M010cTJGNTdr
TlJaY3pYbzZjN29GclV5N3FySG9xN2hvem1WNWM3Y0gKeTBaVFBLc0k4SFE2b0d2SWpkbTVFRVVC
ODBCME5jRlZMc3VrdjBCLzl1MlpsODUwYnNzMFZhU2kySm5JT25ObQp6dTZYSWgva0o0b1g0YnZX
aHNzN2FaaVFadFRJWVlMWm53T09INGZiRHhYZUphVHNwZHRTbWg4WG96Y0NuQjF1CnBBUUord2xx
S1YydWpZTnpWVlBnc1ZqK3REdDExWjZjNWVKUmlaTkVCV0xqekJaa0t6WmdYdkdLdTBOaDRmYXUK
VXhoU1dpUjdVZDREN1BPZVFVQjVhZWpZNGVsVDYvREFlK1h2TkU0azBGQkc5UG5SOUxENURtY05a
UE5sN1lyZwpOLzUrMGhjelRJelRuWkpnR2trQXVJTXlnM25SNDlvQm1jcUxndnVCeEVqc1Naa3NK
cUgwd1VsOFBqeUlsYlU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0Kvagrant@node1:~$
vagrant@node1:~$ kubectl apply -f hwsec.yaml
error: error parsing hwsec.yaml: error converting YAML to JSON: yaml: line 9: could not find expected ':'
vagrant@node1:~$ cat > hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBd2dYWTBPRlNiWFRUcEovL0pMZmdFazlNdTZXaGJYVk9ubyt2T3dDWVFKajJrazk5CkpzNnFCUWxUYnVJUW9GR2RaSFNiSkRuMHE5NUpicnJqOTl6V00zNWFvaTBKNXdTU0gyeTBZQ0JTbzRmMitMeUsKWUhjT2xCa0V0a0hRTjBqd3dJd1g5ZmUwT1lMVWhoMTdGandyazNKd0ZwZFE5QnhHdFhHMEthd2tYVXJrTmNCUgpLZnUybDVRVkVnUk5pZFd1QWNlN3g2UHE0aWliVnNHNEFsUnViVlFmT1ZiSVE2ZmlyQ2tBVzRzU2xlSDNjYXZRClBKVVZ0dnErNWJpcFAvMlp5UjlTS2tzWkNQQXpsNGpzVElkY21wQ0Y0aTNJNWJjOUg4MjlybzlOWnRSNEdCeFcKUE04Tm5FYlZ5UThDTWkxb3pONjVWMWhJY2RVZ2ovM1FaeHZMS1hqSXcvTHEwY1FUK0t6ZXNYcThrNGVnSWdEcgo2ZnVTM0g0bWdmMk5RWmQyTWVUMVh1QVZTU2w1NzNLRUdTOXZSaGxnOHNxc0ljR3BHU2tzb0NGaTJZc0hGQllZCmV4Vi9YYldOM2ZtbXZ1Nmh4Z1k3bWdSRHRGdGhVNjRZbEJHeVpQbWF3NHlad1Z0N3R2d1hidmlKYVRYVDFKdGEKWnhkWlkzZVdmd1VqL1V6OUNLYTVaTzJVMFd1TEE4MFFQUFdxcGVIMlNyR2FTSlY5WnJRNzgyNDBFblY3WmNGbgpnNGNMei9WOFl6MjJKU3hiWWo3VmVXNXNtK3FydHBmSDJGNUZJWmlGMlU2blIyZjdQcUpGV2FPell5ZGtKb3lnCkg1SHZRcVd0U3EwV0pmVWJkdDYrWmVrOXVLYU5seUVUem1VQ29YTHlPUWlvb1F5aGRoT0FIemVQZFMwQ0F3RUEKQVFLQ0FnQjlPNExueUJnSkdGZ25NVEpoUStINFQ0RUt1V3pKbHVjSkIxc21iVXJZbnlLLzYxaXZmTU5XL3Q4QQplaUFiS3JLNWpWNDU4c0tQVUtuN005eEROeUozR0Q1dDRUNDhBOEpCVUV2WW8rUlRNMFpnNUdrNHZJQUhiV0tTCk5VYXMrSUtVOVpmZHBtV0luWDZKbG12RlBVOHZHN1ZuajRHc0hyZ3hFMVFqZGIzL0RZRGhoT0dlaEo4bGxXcEkKTjhqSWg4aUowNTdMekd5bVQybDhoUXM5VGJ2OUMwZ2dIWGlqMnJBL1NUTzI0cnc3VENBSUdjc04zM2lsbzVFbAorNXdhOXBpVnJZYStUN3kzL1RwL3U5d3h4VWtyWnM5VDN4T0YybEUwdnZxSXVteE9UQ084QkVaUmQ1K2tXRUJUClIwRzJtNExDZ1p3RjJiRGc4SnpVOUJIWkM2S0VYOW5OeDVqbXdjU0JPYWJsdHBnU1RtblRteHlHanhOSjFqZnIKSFFJbEQvaWdqM3VoNTFObkgyMXEwd1lXUEI1bGNPUm1mT2NpYVlRcEJpRnRGRkdHVUU1c2QvWHA0b2ZKclg4bwo4ZWdCc3ZXcUkwaitoU0NsTzlzSEFURUFoSzFIZTlaVUFISHJuSWhQV0c5ZlRZSzdIb3hKOGZyMGFJOXpOY1F5CkZIR1pSdHBaVDdKTkZCVmpNZ3A3QUdjWlUyMzVlRWRKNDA1WHU3a1c4c0FnVmNVUUVGdUxDNUhHQmZNOHhpK3IKSVlwdk5TaTVsZVYvVmJGbDBpQjFUSlRZVjFEZG9kbTdCRGo3T0hZWG5FTUt0aG1GS29lRm12V1NEQVZHMzY5cgplZE9XZVdNdkhBMGxuWTN1UUN6OTIzOURtUW9rZUZ5SCtrQVhNekpNL0tzSzNVeEFyUUtDQVFFQStCM1l1bWpRCjI3a1VwOEhWN3Y5ODVHSWRnUlgxVkxZZ2c2OGlqejY5aG11TkFjb1NlU0RzVitmb09VcEhHVGJvL2NHTGlaL1IKT05JeGRWZnVRcG5VR1lhcEU0N3JzMG9LTVpzMSszdnRmY1NtSTZnZFZFOFh0cmVyV0gwNXpDMmZzclExUXF0WQpOeS81Vmd4cjdDR3gzVG9ySXFJK051d1BLL2JYeGU2a201OWhieGJFYkwvRFJSdDZqWHE0dTZhWVYwUTM1dUwwClRNY2JpcHpFVHowV3AxenJwTllYZUJLbjdoQU9KZWJSL1RnNEpUaXVhTUtJbmVROUVFTDI3ZnkrODJRd25oVFEKRTRzTUsxcGZ2ektTQTVYbGo3VXhEV2lML2ZuZWo2WUh2cERhU0RCVXJ2ZGppbjJ4SVo3QnZRRlN1QSt0K1ZLVwptUVgvRWIra3NmRVJEd0tDQVFFQXlEQUI5aEtHcVhUWFZaVnFKSnd0MGNZMWFyNkV6MGNNUnd4UU1WYXhCLzcwCmFJSTh1bVBINEk3QXJKeDlISDM4cm9oZUhTczdUb09nelpkRjdMYUYzdnpQTnVJNGl1N3NjY0hIVjFMYWhtSEwKQUh2UU51WW0yOWVSWDA3VnB5UjhCTFpsWXJiUzhCR1lZRytuOGNJeG4xTndiK2lROG84dlQ2YllCdkkxY0I5NApJaThKcFdPRlJEVHZobzlLY0xGUCtMbmVBUDV4eVZickRjbndvdFVoWnlGNTdlcFNCL1VqdkZRMUxpVFZVZU00CjA1ZUZQakpMTXFWQ3pWYXMwcHk3QXBOK3o2UjJNZ21lR0VaY0IxOWxuYlhXL2g3M010TDJLMjRZNDJOWXhXUkwKVnlMSnNrWWRvemVMUSsxajVleGUvUU4vNXM1ci9OOW9kdUswYVh1ZUF3S0NBUUEyUkdEb3RKQXAzcHN6N2VOYQp1S3FhVVJOZTdteVFNSjEvNzhoQlNGbXZrc3B1ZjhIMm1FclpGekhsaGVkekRsMTdVdCt3SkRKZ21TaVVINzFPCjk5STZHd2ZUN1VpRUdFZU9mZ0lhbFFwbW5hSXczazQ3NkdpcFlCYXI3Z2U4THFabE1hRU1pZWxyZUtTeU8xbEgKZGo4dXdkQTViUDdxaUVyeE5MWVE1cGMrS21mbklqV29DM0VzSmt4eHNVdkNUemUycm9jRGl0UWdEdFJwUnN4eApBRTE2SVlxd3JOckpPbHRjYUVxUDQ2SStIaE81b0dJVks2Y3gwWC9CbE1QcFhZUnVPNVdlbmJLODg0YWYzTTVnClJURkdjM3lZSitzb29ac3MyMy9nTDFJMlRmeFFHYklMNnJQczBIenplNE9vVVNmRWRqbDQ5S1ZYcHNZWkhhOXAKOCszbEFvSUJBUURFWk16WHc4OFcya2tUYm5WbW0wNGNXaTgzbk5lZ25wdzk2NmVVNys3WDRGbVpXZ1FIL0RJdwpiUHc3bTM3bWYvZHdwdHBtRlc2bWxWNGh0SUhtUEI3VDZBUEdYV09KY2VMSHE0dE1jVDF2enVzZ2UxZUhOSDMwCitlUmxzMnJLQW5JbEVXZ2YweXJZV1BxN3lXN2pNRmdNYmdpRjBZeTZXcHpZc04rSTJRQnlFbjJDVTlGTHozb0QKczBjMkpNZXNEVmhldE1KSENWbEtaSnBQdWNqNWhzeXhaOWMrQUw4ZmpYRFVwMnhRNjlQWDlXcGZzMndGMjhPSQpXVGRUU2ZCYzQyUlluNmt1UHJPeVhWc2JoNU5yckR4OTM5S2ZGblFBQ1pWMmdCbXNvMStJcjk5MkNld0VtT01rCnFDNVpvc0I1NWs0K1BMdXpETnBHaUVydEwzWTljZ2hQQW9JQkFDZmNzR3E3aUdFMlQyVElZczRxTnMyWFVrcXQKRTJaQ0llcUFjWExRcmlOMnNNbVhHbFBQU0oyZE9IdmQ3UU5pM1U5SUQ5aXR5SFY4Qlk3b0J4b3JGUkE2ekl6ZwpjOXBPOHQ2TlZSVWUrd25MNWhWdmh0TWhxZmJuNVgvd3RQNnpzVGI5R0gzc0hOVWFTL3F4TmFjY2dTY3VSRGVsClNXb3YvWWJJWVBmbERDU01uaENKb3hzeUhBeTlrOGxsclFNRENacjFaV29MVnRCRDBxUXZBNDcvNW0wUVk0cFoKRGljNk5NQlVFV1J1aG1TRldKRmxhLzJoRkVUcG9HNGdBdHZvdGo1cHF2ZWlubHFSQ3pQakJTNDQyd1VlNWxKMwpLRU9DcnVBVVJqUE1mMWFhYndWMEwzZ3BFUFd5ZWsxOWZQNllRZmRncG5KRThtUGt5VThONGdpTkgwZz0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
  main.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZDekNDQXZPZ0F3SUJBZ0lVRVY3YVE1QjdURmNLRUF2UkQ3bDZ0MmRYcE93d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZURVRNQkVHQTFVRUF3d0tkM2QzTG1oM0xteGhZakFlRncweU16RXhNVEl3T0RJeU5UQmFGdzB5TkRFeApNVEV3T0RJeU5UQmFNQlV4RXpBUkJnTlZCQU1NQ25kM2R5NW9keTVzWVdJd2dnSWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEQ0JkalE0Vkp0ZE5Pa24vOGt0K0FTVDB5N3BhRnRkVTZlajY4N0FKaEEKbVBhU1QzMG16cW9GQ1ZOdTRoQ2dVWjFrZEpza09mU3Iza2x1dXVQMzNOWXpmbHFpTFFubkJKSWZiTFJnSUZLagpoL2I0dklwZ2R3NlVHUVMyUWRBM1NQREFqQmYxOTdRNWd0U0dIWHNXUEN1VGNuQVdsMUQwSEVhMWNiUXByQ1JkClN1UTF3RkVwKzdhWGxCVVNCRTJKMWE0Qng3dkhvK3JpS0p0V3diZ0NWRzV0VkI4NVZzaERwK0tzS1FCYml4S1YKNGZkeHE5QThsUlcyK3I3bHVLay8vWm5KSDFJcVN4a0k4RE9YaU94TWgxeWFrSVhpTGNqbHR6MGZ6YjJ1ajAxbQoxSGdZSEZZOHp3MmNSdFhKRHdJeUxXak0zcmxYV0VoeDFTQ1AvZEJuRzhzcGVNakQ4dXJSeEJQNHJONnhlcnlUCmg2QWlBT3ZwKzVMY2ZpYUIvWTFCbDNZeDVQVmU0QlZKS1hudmNvUVpMMjlHR1dEeXlxd2h3YWtaS1N5Z0lXTFoKaXdjVUZoaDdGWDlkdFkzZCthYSs3cUhHQmp1YUJFTzBXMkZUcmhpVUViSmsrWnJEakpuQlczdTIvQmR1K0lscApOZFBVbTFwbkYxbGpkNVovQlNQOVRQMElwcmxrN1pUUmE0c0R6UkE4OWFxbDRmWktzWnBJbFgxbXREdnpialFTCmRYdGx3V2VEaHd2UDlYeGpQYllsTEZ0aVB0VjVibXliNnF1Mmw4ZllYa1VobUlYWlRxZEhaL3Mrb2tWWm83TmoKSjJRbWpLQWZrZTlDcGExS3JSWWw5UnQyM3I1bDZUMjRwbzJYSVJQT1pRS2hjdkk1Q0tpaERLRjJFNEFmTjQ5MQpMUUlEQVFBQm8xTXdVVEFkQmdOVkhRNEVGZ1FVb1VTT0lkWXd2MEdWbWpzUjg2WUE3N3REQ2tnd0h3WURWUjBqCkJCZ3dGb0FVb1VTT0lkWXd2MEdWbWpzUjg2WUE3N3REQ2tnd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3EKaGtpRzl3MEJBUXNGQUFPQ0FnRUFpZTR1WUVnZURtSjNISnBwQjZBWFBmdTVJZGNDak9kT2pDNjJQeWRoSmRPNgpnMDFMdTFkT0RhM0JLQWMvcW00b2lYdU1sZXBIb0V2MmRvcXovaW40ajBNb1FpUG1oNGgwY1R0NTNORnFoMkJBCkx5eHFrZ25GMlNrRXdHZjZ3aG04cHBzMTJpUi9EVTR3QktHc0dLWk5yaEpuZjNSOEoyOUFmSGNYdGxwZUJMdS8KNnBVenBoOFg4WlY5Zkl5d3pYK0FzRk9UdXF1bUREYlorZGxaRUdEV2JtODZINEowcmUwaGdrZWJvQkFYbk9Fdgo5NGF1Y0JFWHRUbXdKeHoybDU4ajczcmdvZCtaalpveUVHRWFqSFhzNkdLWWx0Y1hRVVpCQkZEOVM3elhqZFdDCnBudUgvV3JPdEJoUkpnQkh5WHkvaEg4M010cTJGNTdrTlJaY3pYbzZjN29GclV5N3FySG9xN2hvem1WNWM3Y0gKeTBaVFBLc0k4SFE2b0d2SWpkbTVFRVVCODBCME5jRlZMc3VrdjBCLzl1MlpsODUwYnNzMFZhU2kySm5JT25ObQp6dTZYSWgva0o0b1g0YnZXaHNzN2FaaVFadFRJWVlMWm53T09INGZiRHhYZUphVHNwZHRTbWg4WG96Y0NuQjF1CnBBUUord2xxS1YydWpZTnpWVlBnc1ZqK3REdDExWjZjNWVKUmlaTkVCV0xqekJaa0t6WmdYdkdLdTBOaDRmYXUKVXhoU1dpUjdVZDREN1BPZVFVQjVhZWpZNGVsVDYvREFlK1h2TkU0azBGQkc5UG5SOUxENURtY05aUE5sN1lyZwpOLzUrMGhjelRJelRuWkpnR2trQXVJTXlnM25SNDlvQm1jcUxndnVCeEVqc1Naa3NKcUgwd1VsOFBqeUlsYlU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0Kvagrant@node1:~$
vagrant@node1:~$ cat hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBd2dYWTBPRlNiWFRUcEovL0pMZmdFazlNdTZXaGJYVk9ubyt2T3dDWVFKajJrazk5CkpzNnFCUWxUYnVJUW9GR2RaSFNiSkRuMHE5NUpicnJqOTl6V00zNWFvaTBKNXdTU0gyeTBZQ0JTbzRmMitMeUsKWUhjT2xCa0V0a0hRTjBqd3dJd1g5ZmUwT1lMVWhoMTdGandyazNKd0ZwZFE5QnhHdFhHMEthd2tYVXJrTmNCUgpLZnUybDVRVkVnUk5pZFd1QWNlN3g2UHE0aWliVnNHNEFsUnViVlFmT1ZiSVE2ZmlyQ2tBVzRzU2xlSDNjYXZRClBKVVZ0dnErNWJpcFAvMlp5UjlTS2tzWkNQQXpsNGpzVElkY21wQ0Y0aTNJNWJjOUg4MjlybzlOWnRSNEdCeFcKUE04Tm5FYlZ5UThDTWkxb3pONjVWMWhJY2RVZ2ovM1FaeHZMS1hqSXcvTHEwY1FUK0t6ZXNYcThrNGVnSWdEcgo2ZnVTM0g0bWdmMk5RWmQyTWVUMVh1QVZTU2w1NzNLRUdTOXZSaGxnOHNxc0ljR3BHU2tzb0NGaTJZc0hGQllZCmV4Vi9YYldOM2ZtbXZ1Nmh4Z1k3bWdSRHRGdGhVNjRZbEJHeVpQbWF3NHlad1Z0N3R2d1hidmlKYVRYVDFKdGEKWnhkWlkzZVdmd1VqL1V6OUNLYTVaTzJVMFd1TEE4MFFQUFdxcGVIMlNyR2FTSlY5WnJRNzgyNDBFblY3WmNGbgpnNGNMei9WOFl6MjJKU3hiWWo3VmVXNXNtK3FydHBmSDJGNUZJWmlGMlU2blIyZjdQcUpGV2FPell5ZGtKb3lnCkg1SHZRcVd0U3EwV0pmVWJkdDYrWmVrOXVLYU5seUVUem1VQ29YTHlPUWlvb1F5aGRoT0FIemVQZFMwQ0F3RUEKQVFLQ0FnQjlPNExueUJnSkdGZ25NVEpoUStINFQ0RUt1V3pKbHVjSkIxc21iVXJZbnlLLzYxaXZmTU5XL3Q4QQplaUFiS3JLNWpWNDU4c0tQVUtuN005eEROeUozR0Q1dDRUNDhBOEpCVUV2WW8rUlRNMFpnNUdrNHZJQUhiV0tTCk5VYXMrSUtVOVpmZHBtV0luWDZKbG12RlBVOHZHN1ZuajRHc0hyZ3hFMVFqZGIzL0RZRGhoT0dlaEo4bGxXcEkKTjhqSWg4aUowNTdMekd5bVQybDhoUXM5VGJ2OUMwZ2dIWGlqMnJBL1NUTzI0cnc3VENBSUdjc04zM2lsbzVFbAorNXdhOXBpVnJZYStUN3kzL1RwL3U5d3h4VWtyWnM5VDN4T0YybEUwdnZxSXVteE9UQ084QkVaUmQ1K2tXRUJUClIwRzJtNExDZ1p3RjJiRGc4SnpVOUJIWkM2S0VYOW5OeDVqbXdjU0JPYWJsdHBnU1RtblRteHlHanhOSjFqZnIKSFFJbEQvaWdqM3VoNTFObkgyMXEwd1lXUEI1bGNPUm1mT2NpYVlRcEJpRnRGRkdHVUU1c2QvWHA0b2ZKclg4bwo4ZWdCc3ZXcUkwaitoU0NsTzlzSEFURUFoSzFIZTlaVUFISHJuSWhQV0c5ZlRZSzdIb3hKOGZyMGFJOXpOY1F5CkZIR1pSdHBaVDdKTkZCVmpNZ3A3QUdjWlUyMzVlRWRKNDA1WHU3a1c4c0FnVmNVUUVGdUxDNUhHQmZNOHhpK3IKSVlwdk5TaTVsZVYvVmJGbDBpQjFUSlRZVjFEZG9kbTdCRGo3T0hZWG5FTUt0aG1GS29lRm12V1NEQVZHMzY5cgplZE9XZVdNdkhBMGxuWTN1UUN6OTIzOURtUW9rZUZ5SCtrQVhNekpNL0tzSzNVeEFyUUtDQVFFQStCM1l1bWpRCjI3a1VwOEhWN3Y5ODVHSWRnUlgxVkxZZ2c2OGlqejY5aG11TkFjb1NlU0RzVitmb09VcEhHVGJvL2NHTGlaL1IKT05JeGRWZnVRcG5VR1lhcEU0N3JzMG9LTVpzMSszdnRmY1NtSTZnZFZFOFh0cmVyV0gwNXpDMmZzclExUXF0WQpOeS81Vmd4cjdDR3gzVG9ySXFJK051d1BLL2JYeGU2a201OWhieGJFYkwvRFJSdDZqWHE0dTZhWVYwUTM1dUwwClRNY2JpcHpFVHowV3AxenJwTllYZUJLbjdoQU9KZWJSL1RnNEpUaXVhTUtJbmVROUVFTDI3ZnkrODJRd25oVFEKRTRzTUsxcGZ2ektTQTVYbGo3VXhEV2lML2ZuZWo2WUh2cERhU0RCVXJ2ZGppbjJ4SVo3QnZRRlN1QSt0K1ZLVwptUVgvRWIra3NmRVJEd0tDQVFFQXlEQUI5aEtHcVhUWFZaVnFKSnd0MGNZMWFyNkV6MGNNUnd4UU1WYXhCLzcwCmFJSTh1bVBINEk3QXJKeDlISDM4cm9oZUhTczdUb09nelpkRjdMYUYzdnpQTnVJNGl1N3NjY0hIVjFMYWhtSEwKQUh2UU51WW0yOWVSWDA3VnB5UjhCTFpsWXJiUzhCR1lZRytuOGNJeG4xTndiK2lROG84dlQ2YllCdkkxY0I5NApJaThKcFdPRlJEVHZobzlLY0xGUCtMbmVBUDV4eVZickRjbndvdFVoWnlGNTdlcFNCL1VqdkZRMUxpVFZVZU00CjA1ZUZQakpMTXFWQ3pWYXMwcHk3QXBOK3o2UjJNZ21lR0VaY0IxOWxuYlhXL2g3M010TDJLMjRZNDJOWXhXUkwKVnlMSnNrWWRvemVMUSsxajVleGUvUU4vNXM1ci9OOW9kdUswYVh1ZUF3S0NBUUEyUkdEb3RKQXAzcHN6N2VOYQp1S3FhVVJOZTdteVFNSjEvNzhoQlNGbXZrc3B1ZjhIMm1FclpGekhsaGVkekRsMTdVdCt3SkRKZ21TaVVINzFPCjk5STZHd2ZUN1VpRUdFZU9mZ0lhbFFwbW5hSXczazQ3NkdpcFlCYXI3Z2U4THFabE1hRU1pZWxyZUtTeU8xbEgKZGo4dXdkQTViUDdxaUVyeE5MWVE1cGMrS21mbklqV29DM0VzSmt4eHNVdkNUemUycm9jRGl0UWdEdFJwUnN4eApBRTE2SVlxd3JOckpPbHRjYUVxUDQ2SStIaE81b0dJVks2Y3gwWC9CbE1QcFhZUnVPNVdlbmJLODg0YWYzTTVnClJURkdjM3lZSitzb29ac3MyMy9nTDFJMlRmeFFHYklMNnJQczBIenplNE9vVVNmRWRqbDQ5S1ZYcHNZWkhhOXAKOCszbEFvSUJBUURFWk16WHc4OFcya2tUYm5WbW0wNGNXaTgzbk5lZ25wdzk2NmVVNys3WDRGbVpXZ1FIL0RJdwpiUHc3bTM3bWYvZHdwdHBtRlc2bWxWNGh0SUhtUEI3VDZBUEdYV09KY2VMSHE0dE1jVDF2enVzZ2UxZUhOSDMwCitlUmxzMnJLQW5JbEVXZ2YweXJZV1BxN3lXN2pNRmdNYmdpRjBZeTZXcHpZc04rSTJRQnlFbjJDVTlGTHozb0QKczBjMkpNZXNEVmhldE1KSENWbEtaSnBQdWNqNWhzeXhaOWMrQUw4ZmpYRFVwMnhRNjlQWDlXcGZzMndGMjhPSQpXVGRUU2ZCYzQyUlluNmt1UHJPeVhWc2JoNU5yckR4OTM5S2ZGblFBQ1pWMmdCbXNvMStJcjk5MkNld0VtT01rCnFDNVpvc0I1NWs0K1BMdXpETnBHaUVydEwzWTljZ2hQQW9JQkFDZmNzR3E3aUdFMlQyVElZczRxTnMyWFVrcXQKRTJaQ0llcUFjWExRcmlOMnNNbVhHbFBQU0oyZE9IdmQ3UU5pM1U5SUQ5aXR5SFY4Qlk3b0J4b3JGUkE2ekl6ZwpjOXBPOHQ2TlZSVWUrd25MNWhWdmh0TWhxZmJuNVgvd3RQNnpzVGI5R0gzc0hOVWFTL3F4TmFjY2dTY3VSRGVsClNXb3YvWWJJWVBmbERDU01uaENKb3hzeUhBeTlrOGxsclFNRENacjF
  main.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZDekNDQXZPZ0F3SUJBZ0lVRVY3YVE1QjdURmNLRUF2UkQ3bDZ0MmRYcE93d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZURVRNQkVHQTFVRUF3d0tkM2QzTG1oM0xteGhZakFlRncweU16RXhNVEl3T0RJeU5UQmFGdzB5TkRFeApNVEV3T0RJeU5UQmFNQlV4RXpBUkJnTlZCQU1NQ25kM2R5NW9keTVzWVdJd2dnSWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElDRHdBd2dnSUtBb0lDQVFEQ0JkalE0Vkp0ZE5Pa24vOGt0K0FTVDB5N3BhRnRkVTZlajY4N0FKaEEKbVBhU1QzMG16cW9GQ1ZOdTRoQ2dVWjFrZEpza09mU3Iza2x1dXVQMzNOWXpmbHFpTFFubkJKSWZiTFJnSUZLagpoL2I0dklwZ2R3NlVHUVMyUWRBM1NQREFqQmYxOTdRNWd0U0dIWHNXUEN1VGNuQVdsMUQwSEVhMWNiUXByQ1JkClN1UTF3RkVwKzdhWGxCVVNCRTJKMWE0Qng3dkhvK3JpS0p0V3diZ0NWRzV0VkI4NVZzaERwK0tzS1FCYml4S1YKNGZkeHE5QThsUlcyK3I3bHVLay8vWm5KSDFJcVN4a0k4RE9YaU94TWgxeWFrSVhpTGNqbHR6MGZ6YjJ1ajAxbQoxSGdZSEZZOHp3MmNSdFhKRHdJeUxXak0zcmxYV0VoeDFTQ1AvZEJuRzhzcGVNakQ4dXJSeEJQNHJONnhlcnlUCmg2QWlBT3ZwKzVMY2ZpYUIvWTFCbDNZeDVQVmU0QlZKS1hudmNvUVpMMjlHR1dEeXlxd2h3YWtaS1N5Z0lXTFoKaXdjVUZoaDdGWDlkdFkzZCthYSs3cUhHQmp1YUJFTzBXMkZUcmhpVUViSmsrWnJEakpuQlczdTIvQmR1K0lscApOZFBVbTFwbkYxbGpkNVovQlNQOVRQMElwcmxrN1pUUmE0c0R6UkE4OWFxbDRmWktzWnBJbFgxbXREdnpialFTCmRYdGx3V2VEaHd2UDlYeGpQYllsTEZ0aVB0VjVibXliNnF1Mmw4ZllYa1VobUlYWlRxZEhaL3Mrb2tWWm83TmoKSjJRbWpLQWZrZTlDcGExS3JSWWw5UnQyM3I1bDZUMjRwbzJYSVJQT1pRS2hjdkk1Q0tpaERLRjJFNEFmTjQ5MQpMUUlEQVFBQm8xTXdVVEFkQmdOVkhRNEVGZ1FVb1VTT0lkWXd2MEdWbWpzUjg2WUE3N3REQ2tnd0h3WURWUjBqCkJCZ3dGb0FVb1VTT0lkWXd2MEdWbWpzUjg2WUE3N3REQ2tnd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3EKaGtpRzl3MEJBUXNGQUFPQ0FnRUFpZTR1WUVnZURtSjNISnBwQjZBWFBmdTVJZGNDak9kT2pDNjJQeWRoSmRPNgpnMDFMdTFkT0RhM0JLQWMvcW00b2lYdU1sZXBIb0V2MmRvcXovaW40ajBNb1FpUG1oNGgwY1R0NTNORnFoMkJBCkx5eHFrZ25GMlNrRXdHZjZ3aG04cHBzMTJpUi9EVTR3QktHc0dLWk5yaEpuZjNSOEoyOUFmSGNYdGxwZUJMdS8KNnBVenBoOFg4WlY5Zkl5d3pYK0FzRk9UdXF1bUREYlorZGxaRUdEV2JtODZINEowcmUwaGdrZWJvQkFYbk9Fdgo5NGF1Y0JFWHRUbXdKeHoybDU4ajczcmdvZCtaalpveUVHRWFqSFhzNkdLWWx0Y1hRVVpCQkZEOVM3elhqZFdDCnBudUgvV3JPdEJoUkpnQkh5WHkvaEg4M010cTJGNTdrTlJaY3pYbzZjN29GclV5N3FySG9xN2hvem1WNWM3Y0gKeTBaVFBLc0k4SFE2b0d2SWpkbTVFRVVCODBCME5jRlZMc3VrdjBCLzl1MlpsODUwYnNzMFZhU2kySm5JT25ObQp6dTZYSWgva0o0b1g0YnZXaHNzN2FaaVFadFRJWVlMWm53T09INGZiRHhYZUphVHNwZHRTbWg4WG96Y0NuQjF1CnBBUUord2xxS1YydWpZTnpWVlBnc1ZqK3REdDExWjZjNWVKUmlaTkVCV0xqekJaa0t6WmdYdkdLdTBOaDRmYXUKVXhoU1dpUjdVZDREN1BPZVFVQjVhZWpZNGVsVDYvREFlK1h2TkU0azBGQkc5UG5SOUxENURtY05aUE5sN1lyZwpOLzUrMGhjelRJelRuWkpnR2trQXVJTXlnM25SNDlvQm1jcUxndnVCeEVqc1Naa3NKcUgwd1VsOFBqeUlsYlU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0Kvagrant@node1:~$ kubectl apply -f hwsec.yaml
Error from server (BadRequest): error when creating "hwsec.yaml": Secret in version "v1" cannot be handled as a Secret: illegal base64 data at input byte 4080
vagrant@node1:~$ kubectl apply -f hwpod.yaml
pod/hwpod created
vagrant@node1:~$ kubectl get pods
NAME    READY   STATUS              RESTARTS   AGE
hwpod   0/1     ContainerCreating   0          76s
vagrant@node1:~$ kubectl get secrets
No resources found in default namespace.
vagrant@node1:~$ kubectl get configmaps
NAME               DATA   AGE
hwcm               4      19m
kube-root-ca.crt   1      23h
vagrant@node1:~$ cat > hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: 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
  main.crt: MIIFCzCCAvOgAwIBAgIUEV7aQ5B7TFcKEAvRD7l6t2dXpOwwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UEAwwKd3d3Lmh3LmxhYjAeFw0yMzExMTIwODIyNTBaFw0yNDExMTEwODIyNTBaMBUxEzARBgNVBAMMCnd3dy5ody5sYWIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDCBdjQ4VJtdNOkn/8kt+AST0y7paFtdU6ej687AJhAmPaST30mzqoFCVNu4hCgUZ1kdJskOfSr3kluuuP33NYzflqiLQnnBJIfbLRgIFKjh/b4vIpgdw6UGQS2QdA3SPDAjBf197Q5gtSGHXsWPCuTcnAWl1D0HEa1cbQprCRdSuQ1wFEp+7aXlBUSBE2J1a4Bx7vHo+riKJtWwbgCVG5tVB85VshDp+KsKQBbixKV4fdxq9A8lRW2+r7luKk//ZnJH1IqSxkI8DOXiOxMh1yakIXiLcjltz0fzb2uj01m1HgYHFY8zw2cRtXJDwIyLWjM3rlXWEhx1SCP/dBnG8speMjD8urRxBP4rN6xeryTh6AiAOvp+5LcfiaB/Y1Bl3Yx5PVe4BVJKXnvcoQZL29GGWDyyqwhwakZKSygIWLZiwcUFhh7FX9dtY3d+aa+7qHGBjuaBEO0W2FTrhiUEbJk+ZrDjJnBW3u2/Bdu+IlpNdPUm1pnF1ljd5Z/BSP9TP0Iprlk7ZTRa4sDzRA89aql4fZKsZpIlX1mtDvzbjQSdXtlwWeDhwvP9XxjPbYlLFtiPtV5bmyb6qu2l8fYXkUhmIXZTqdHZ/s+okVZo7NjJ2QmjKAfke9Cpa1KrRYl9Rt23r5l6T24po2XIRPOZQKhcvI5CKihDKF2E4AfN491LQIDAQABo1MwUTAdBgNVHQ4EFgQUoUSOIdYwv0GVmjsR86YA77tDCkgwHwYDVR0jBBgwFoAUoUSOIdYwv0GVmjsR86YA77tDCkgwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAie4uYEgeDmJ3HJppB6AXPfu5IdcCjOdOjC62PydhJdO6g01Lu1dODa3BKAc/qm4oiXuMlepHoEv2doqz/in4j0MoQiPmh4h0cTt53NFqh2BALyxqkgnF2SkEwGf6whm8pps12iR/DU4wBKGsGKZNrhJnf3R8J29AfHcXtlpeBLu/6pUzph8X8ZV9fIywzX+AsFOTuqumDDbZ+dlZEGDWbm86H4J0re0hgkeboBAXnOEv94aucBEXtTmwJxz2l58j73rgod+ZjZoyEGEajHXs6GKYltcXQUZBBFD9S7zXjdWCpnuH/WrOtBhRJgBHyXy/hH83Mtq2F57kNRZczXo6c7oFrUy7qrHoq7hozmV5c7cHy0ZTPKsI8HQ6oGvIjdm5EEUB80B0NcFVLsukv0B/9u2Zl850bss0VaSi2JnIOnNmzu6XIh/kJ4oX4bvWhss7aZiQZtTIYYLZnwOOH4fbDxXeJaTspdtSmh8XozcCnB1upAQJ+wlqKV2ujYNzVVPgsVj+tDt11Z6c5eJRiZNEBWLjzBZkKzZgXvGKu0Nh4fauUxhSWiR7Ud4D7POeQUB5aejY4elT6/DAe+XvNE4k0FBG9PnR9LD5DmcNZPNl7YrgN/5+0hczTIzTnZJgGkkAuIMyg3nR49oBmcqLgvuBxEjsSZksJqH0wUl8PjyIlbU=vagrant@node1:~$
vagrant@node1:~$ cat hwsec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hwsec
type: Opaque
data:
  main.key: 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
  main.crt: MIIFCzCCAvOgAwIBAgIUEV7aQ5B7TFcKEAvRD7l6t2dXpOwwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UEAwwKd3d3Lmh3LmxhYjAeFw0yMzExMTIwODIyNTBaFw0yNDExMTEwODIyNTBaMBUxEzARBgNVBAMMCnd3dy5ody5sYWIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDCBdjQ4VJtdNOkn/8kt+AST0y7paFtdU6ej687AJhAmPaST30mzqoFCVNu4hCgUZ1kdJskOfSr3kluuuP33NYzflqiLQnnBJIfbLRgIFKjh/b4vIpgdw6UGQS2QdA3SPDAjBf197Q5gtSGHXsWPCuTcnAWl1D0HEa1cbQprCRdSuQ1wFEp+7aXlBUSBE2J1a4Bx7vHo+riKJtWwbgCVG5tVB85VshDp+KsKQBbixKV4fdxq9A8lRW2+r7luKk//ZnJH1IqSxkI8DOXiOxMh1yakIXiLcjltz0fzb2uj01m1HgYHFY8zw2cRtXJDwIyLWjM3rlXWEhx1SCP/dBnG8speMjD8urRxBP4rN6xeryTh6AiAOvp+5LcfiaB/Y1Bl3Yx5PVe4BVJKXnvcoQZL29GGWDyyqwhwakZKSygIWLZiwcUFhh7FX9dtY3d+aa+7qHGBjuaBEO0W2FTrhiUEbJk+ZrDjJnBW3u2/Bdu+IlpNdPUm1pnF1ljd5Z/BSP9TP0Iprlk7ZTRa4sDzRA89aql4fZKsZpIlX1mtDvzbjQSdXtlwWeDhwvP9XxjPbYlLFtiPtV5bmyb6qu2l8fYXkUhmIXZTqdHZ/s+okVZo7NjJ2QmjKAfke9Cpa1KrRYl9Rt23r5l6T24po2XIRPOZQKhcvI5CKihDKF2E4AfN491LQIDAQABo1MwUTAdBgNVHQ4EFgQUoUSOIdYwv0GVmjsR86YA77tDCkgwHwYDVR0jBBgwFoAUoUSOIdYwv0GVmjsR86YA77tDCkgwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAie4uYEgeDmJ3HJppB6AXPfu5IdcCjOdOjC62PydhJdO6g01Lu1dODa3BKAc/qm4oiXuMlepHoEv2doqz/in4j0MoQiPmh4h0cTt53NFqh2BALyxqkgnF2SkEwGf6whm8pps12iR/DU4wBKGsGKZNrhJnf3R8J29AfHcXtlpeBLu/6pUzph8X8ZV9fIywzX+AsFOTuqumDDbZ+dlZEGDWbm86H4J0re0hgkeboBAXnOEv94aucBEXtTmwJxz2l58j73rgod+ZjZoyEGEajHXs6GKYltcXQUZBBFD9S7zXjdWCpnuH/WrOtBhRJgBHyXy/hH83Mtq2F57kNRZczXo6c7oFrUy7qrHoq7hozmV5c7cHy0ZTPKsI8HQ6oGvIjdm5EEUB80B0NcFVLsukv0B/9u2Zl850bss0VaSi2JnIOnNmzu6XIh/kJ4oX4bvWhss7aZiQZtTIYYLZnwOOH4fbDxXeJaTspdtSmh8XozcCnB1upAQJ+wlqKV2ujYNzVVPgsVj+tDt11Z6c5eJRiZNEBWLjzBZkKzZgXvGKu0Nh4fauUxhSWiR7Ud4D7POeQUB5aejY4elT6/DAe+XvNE4k0FBG9PnR9LD5DmcNZPNl7YrgN/5+0hczTIzTnZJgGkkAuIMyg3nR49oBmcqLgvuBxEjsSZksJqH0wUl8PjyIlbU=vagrant@node1:~$
vagrant@node1:~$ kubectl apply -f hwsec.yaml
secret/hwsec created
vagrant@node1:~$ kubectl get pods
NAME    READY   STATUS              RESTARTS   AGE
hwpod   0/1     ContainerCreating   0          8m2s
vagrant@node1:~$ kubectl get configmaps
NAME               DATA   AGE
hwcm               4      26m
kube-root-ca.crt   1      23h
vagrant@node1:~$ kubectl get secrets
NAME    TYPE     DATA   AGE
hwsec   Opaque   2      25s
vagrant@node1:~$ history
    1  mkdir part1
    2  cd part1
    3  cat > emptydir-pod.yaml
    4  cat emptydir-pod.yaml
    5  kubectl apply -f part1/emptydir-pod.yaml
    6  cat > service.yaml
    7  cat service.yaml
    8  kubectl apply -f emptydir-pod.yaml
    9  kubectl apply -f service.yaml
   10  kubectl get pods,svc
   11  kubectl describe pod pod-ed
   12  kubectl exec -it pod-ed -- bash
   13  kubectl exec -it pod-ed -- /bin/bash -c "kill 1"
   14  kubectl get pods,svc
   15  kubectl describe pod pod-ed
   16  kubectl delete pod pod-ed
   17  kubectl get pods,svc
   18  kubectl apply -f emptydir-pod.yaml
   19  kubectl get pods,svc
   20  cat > git-pod.yaml
   21  cat git-pod.yaml
   22  kubectl apply -f git-pod.yaml
   23  kubectl exec -it pod-git -- bash
   24  kubectl delete pod pod-git
   25  cat > hostpath-deployment.yaml
   26  cat hostpath-deployment.yaml
   27  mkdir --mode=777 /tmp/data
   28  ls -al /tmp
   29  exit
   30  kubectl apply -f hostpath-deployment.yaml
   31  cat hostpath-deployment.yaml
   32  cat > hostpath-deployment.yaml
   33  cat hostpath-deployment.yaml
   34  kubectl apply -f hostpath-deployment.yaml
   35  kubectl get pods -o wide
   36  kubectl delete -f hostpath-deployment.yaml
   37  kubectl get pods -o wide
   38  cat pod-ed.yaml
   39  kubectl pod delete pod-ed
   40  kubectl delete pods pod-ed
   41  kubectl get pods -o wide
   42  kubectl apply -f hostpath-deployment.yaml
   43  kubectl get pods -o wide
   44  kubectl delete -f hostpath-deployment.yaml
   45  kubectl get pods -o wide
   46  ssh vagrant@node2
   47  exit
   48  echo 'nfs-server-ip   nfs-server' | sudo tee -a /etc/hosts
   49  sudo apt-get update && apt-get install -y nfs-common
   50  chmod -R 777 /data/nfs/k8sdata
   51  cat > nfs-deployment.yaml
   52  cat nfs-deployment.yaml
   53  kubectl apply -f nfs-deployment.yaml
   54  kubectl get pods -o wide
   55  sudo chmod -R 777 /data/nfs/k8sdata
   56  mkdir --mode=777 /data/nfs/k8sdata
   57  mkdir --mode=777 /data/nfs
   58  sudo mkdir --mode=777 /data/nfs/k8sdata
   59  sudo mkdir --mode=777 /data
   60  sudo mkdir --mode=777 /data/nfs
   61  sudo mkdir --mode=777 /data/nfs/k8sdata
   62  kubectl delete -f nfs-deployment.yaml
   63  exit
   64  chmod -R 777 /data/nfs/k8sdata
   65  sudo chmod -R 777 /data/nfs/k8sdata
   66  exit
   67  kubectl delete -f hostpath-deployment.yaml
   68  cat nfs-deployment.yaml
   69  kubectl apply -f hostpath-deployment.yaml
   70  kubectl get pods -o wide
   71  kubectl describe pod notes-deploy-5485bf6fdd-jspsp
   72  kubectl delete -f nfs-deployment.yaml
   73  kubectl get pods -o wide
   74  cat > pvc10gb.yaml
   75  cat pvc10gb.yaml
   76  kubectl apply -f pvnfs10gb.yaml
   77  cat > pvnfs10gb.yaml
   78  cat pvnfs10gb.yaml
   79  kubectl apply -f pvnfs10gb.yaml
   80  kubectl get pv
   81  kubectl describe pv pvnfs10gb
   82  cat pvc10gb.yaml
   83  kubectl apply -f pvc10gb.yaml
   84  kubectl get pv
   85  kubectl get pvc
   86  kubectl describe pvc pvc10gb
   87  cat > pv-deployment.yaml
   88  cat pv-deployment.yaml
   89  kubectl apply -f pv-deployment.yaml
   90  kubectl get pods -o wide -w
   91  kubectl describe pvc pvc10gb
   92  kubectl describe pod notes-deploy-845b59c97f-pf76h
   93  kubectl get pods -o wide -w
   94  kubectl delete -f pv-deployment.yaml
   95  kubectl delete -f pvc10gb.yaml
   96  kubectl apply -f pvc10gb.yaml
   97  kubectl apply -f pv-deployment.yaml
   98  kubectl get pods -o wide -w
   99  kubectl scale --replicas=2 deployment notes-deploy
  100  kubectl delete -f pv-deployment.yaml
  101  kubectl delete -f service.yaml
  102  kubectl delete -f part1/service.yaml
  103  kubectl delete -f pvc10gb.yaml
  104  kubectl delete -f pvnfs10gb.yaml
  105  history
  106  kubectl get pods -o wide -w
  107  kubectl get pods -o wide
  108  echo 'nfs-server-ip   nfs-server' | sudo tee -a /etc/hosts
  109  ip a
  110  hostname -I
  111  cat > pod-no-env.yaml
  112  cat pod-no-env.yaml
  113  kubectl apply -f pod-no-env.yaml
  114  cat > svc-environ.yaml
  115  cat svc-environ.yaml
  116  kubectl apply -f svc-environ.yaml
  117  kubectl get pods,svc
  118  kubectl describe pod pod-no-env
  119  kubectl delete -f pod-no-env.yaml
  120  cat > pod-w-env.yaml
  121  cat pod-w-env.yaml
  122  kubectl apply -f pod-w-env.yaml
  123  kubectl describe pod pod-w-env
  124  kubectl delete -f pod-w-env.yaml
  125  kubectl create configmap environ-map-a --from-literal=XYZ1=VALUE1
  126  kubectl get cm
  127  kubectl describe cm environ-map-a
  128  kubectl get cm environ-map-a -o yaml
  129  kubectl create configmap environ-map-b --from-literal=XYZ2=42 --from-literal=XYZ3=3.14
  130  kubectl get cm
  131  kubectl delete cm environ-map-a environ-map-b
  132  cat > cm.yaml
  133  cat cm.yaml
  134  kubectl apply -f cm.yaml
  135  kubectl get cm
  136  cat > variables.conf << EOF
  137  XYZ_FF1=VALUE1
  138  XYZ_FF2=42
  139  EOF
  140  cat variables.conf
  141  kubectl create configmap environ-map-a --from-file=variables.conf
  142  kubectl get cm
  143  kubectl get cm environ-map-a -o yaml
  144  cat > flag.conf << EOF
  145  true
  146  EOF
  147  kubectl create configmap environ-map-b --from-file=debug=flag.conf
  148  kubectl get cm
  149  kubectl get cm environ-map-b -o yaml
  150  kubectl delete cm environ-map-a environ-map-b
  151  rm variables.conf flag.conf
  152  mkdir variables
  153  echo 'production' > variables/mode
  154  echo 'false' > variables/debug
  155  tree variables/
  156  kubectl create configmap environ-map-a --from-file=variables/
  157  kubectl get cm
  158  kubectl get cm environ-map-a -o yaml
  159  kubectl delete cm environ-map-a
  160  rm -rf variables/
  161  cat > pod-cm-env-var.yaml
  162  cat pod-cm-env-var.yaml
  163  kubectl apply -f pod-cm-env-var.yaml
  164  kubectl get cm environ-map-1 -o yaml
  165  kubectl delete pod pod-cm-env-var
  166  cat > pod-cm-env-vars.yaml
  167  cat pod-cm-env-vars.yaml
  168  kubectl apply -f pod-cm-env-vars.yaml
  169  kubectl delete pod pod-cm-env-vars
  170  kubectl delete cm environ-map-1
  171  kubectl get secret
  172  kubectl create secret generic secret-a --from-literal=password='Parolka1'
  173  echo 'DrugaParolka1' > password.conf
  174  kubectl create secret generic secret-b --from-file=password=password.conf
  175  kubectl get secret
  176  kubectl get secret secret-a -o yaml
  177  kubectl get secret secret-b -o yaml
  178  echo UGFyb2xrYTE= | base64 --decode
  179  kubectl delete secret secret-a secret-b
  180  cat > secrets.yaml
  181  cat secrets.yaml
  182  kubectl apply -f secrets.yaml
  183  kubectl get secrets
  184  cat > pod-secret.yaml
  185  cat pod-secret.yaml
  186  kubectl apply -f pod-secret.yaml
  187  kubectl delete pod/pod-secret service/svc-environ secret/mysecrets
  188  rm password.conf
  189  ls data/nfs
  190  sudo ls data/nfs
  191  sudo apt-get update
  192  sudo apt-get install nfs-kernel-server
  193  ls data
  194  mkdir data
  195  ls data
  196  cd data
  197  mkdir nfs
  198  cd nfs
  199  sudo mkdir k8spva
  200  sudo mkdir k8spvb
  201  sudo mkdir k8spvc
  202  ls
  203  cd ..
  204  ls /etc/exports
  205  cd etc
  206  cd /etc
  207  cd /exports
  208  ls
  209  sudo vi /etc/exports
  210  mkdir data
  211  sudo mkdir data
  212  cd data
  213  sudo mkdir nfs
  214  cd ..
  215  ls
  216  cd data
  217  ls
  218  cd ..
  219  sudo service nfs-kernel-server restart
  220  sudo nano /etc/hosts
  221  ip a
  222  hostname -I
  223  sudo nano /etc/hosts
  224  ping nfs-server
  225  cd etc
  226  cd data
  227  cd nfs
  228  sudo mkdir k8spva
  229  sudo mkdir k8spvb
  230  sudo mkdir k8spvc
  231  ls
  232  sudo chmod 777 k8spv(a,b,c)
  233  sudo chmod 777 k8spva
  234  sudo chmod 777 k8spvb
  235  sudo chmod 777 k8spvc
  236  cd /etc
  237  sudo vi exports
  238  sudo export
  239  sudo exportfs -rav
  240  cd ..
  241  cat > pvssa.yaml
  242  sudo cat > pvssa.yaml
  243  sudo cat pvssa.yaml
  244  cat > pvssa.yaml
  245  sudo cat > pvssa.yaml
  246  exit
  247  cat > pvssa.yaml
  248  cat > pvssb.yaml
  249  cat > pvssc.yaml
  250  cat pvssa.yaml
  251  cat pvssb.yaml
  252  cat pvssc.yaml
  253  ping nfs-server
  254  kubectl apply -f pvssa.yaml
  255  kubectl apply -f pvssb.yaml
  256  kubectl apply -f pvssc.yaml
  257  kubectl get pv
  258  cat > svcss.yaml
  259  cat svcss.yaml
  260  kubectl apply -f svcss.yaml
  261  kubectl get svc
  262  cat > ss.yaml
  263  cat ss.yaml
  264  kubectl apply -f ss.yaml
  265  kubectl get pod,svc,statefulset,pv,pvc
  266  cat > svcssnp.yaml
  267  kubectl apply -f svcssnp.yaml
  268  kubectl get pod,svc,statefulset,pv,pvc
  269  kubectl get pods,pvc -o wide
  270  kubectl delete pod facts-0
  271  kubect get pods,pvc -o wide
  272  kubectl get pods,pvc -o wide
  273  kubectl scale --replicas=1 statefulset/facts
  274  kubectl get pod,svc,statefulset,pv,pvc
  275  kubectl scale --replicas=3 statefulset/facts
  276  kubectl get pod,svc,statefulset,pv,pvc
  277  kubectl delete statefulset.apps/facts
  278  kubectl delete service/facts service/factsnp
  279  kubectl delete persistentvolumeclaim facts-data-facts-0 facts-data-facts-1 facts-data-facts-2
  280  kubectl delete persistentvolume pvssa pvssb pvssc
  281  history
  282  exit
  283  kubectl version --short
  284  uname -a
  285  openssl genrsa -out main.key 4096
  286  openssl req -new -x509 -key main.key -out main.crt -days 365 -subj /CN=www.hw.lab
  287  cat main.key
  288  cat main.crt
  289  cat > hwcm.yaml
  290  cat hwcm.yaml
  291  cat > hwpod.yaml
  292  cat hwpod.yaml
  293  cat > hwsec.yaml
  294  cat hwsec.yaml
  295  kubectl apply -f hwcm.yaml
  296  kubectl apply -f hwsec.yaml
  297  cat > hwsec.yaml
  298  cat hwsec.yaml
  299  kubectl apply -f hwsec.yaml
  300  base64 main.key
  301  base64 main.crt
  302  kubectl apply -f hwsec.yaml
  303  cat > hwsec.yaml
  304  kubectl apply -f hwsec.yaml
  305  cat > hwsec.yaml
  306  cat hwsec.yaml
  307  kubectl apply -f hwsec.yaml
  308  kubectl apply -f hwpod.yaml
  309  kubectl get pods
  310  kubectl get secrets
  311  kubectl get configmaps
  312  cat > hwsec.yaml
  313  cat hwsec.yaml
  314  kubectl apply -f hwsec.yaml
  315  kubectl get pods
  316  kubectl get configmaps
  317  kubectl get secrets
  318  history
vagrant@node1:~$ kubectl delete configmap hwcm
configmap "hwcm" deleted
vagrant@node1:~$ kubectl delete secret hwsec
secret "hwsec" deleted
vagrant@node1:~$ kubectl delete pod hwpod
pod "hwpod" deleted
vagrant@node1:~$ kubectl get configmaps
NAME               DATA   AGE
kube-root-ca.crt   1      23h
vagrant@node1:~$ kubectl get secrets
No resources found in default namespace.
vagrant@node1:~$ kubectl get pods
No resources found in default namespace.
vagrant@node1:~$ history
    1  mkdir part1
    2  cd part1
    3  cat > emptydir-pod.yaml
    4  cat emptydir-pod.yaml
    5  kubectl apply -f part1/emptydir-pod.yaml
    6  cat > service.yaml
    7  cat service.yaml
    8  kubectl apply -f emptydir-pod.yaml
    9  kubectl apply -f service.yaml
   10  kubectl get pods,svc
   11  kubectl describe pod pod-ed
   12  kubectl exec -it pod-ed -- bash
   13  kubectl exec -it pod-ed -- /bin/bash -c "kill 1"
   14  kubectl get pods,svc
   15  kubectl describe pod pod-ed
   16  kubectl delete pod pod-ed
   17  kubectl get pods,svc
   18  kubectl apply -f emptydir-pod.yaml
   19  kubectl get pods,svc
   20  cat > git-pod.yaml
   21  cat git-pod.yaml
   22  kubectl apply -f git-pod.yaml
   23  kubectl exec -it pod-git -- bash
   24  kubectl delete pod pod-git
   25  cat > hostpath-deployment.yaml
   26  cat hostpath-deployment.yaml
   27  mkdir --mode=777 /tmp/data
   28  ls -al /tmp
   29  exit
   30  kubectl apply -f hostpath-deployment.yaml
   31  cat hostpath-deployment.yaml
   32  cat > hostpath-deployment.yaml
   33  cat hostpath-deployment.yaml
   34  kubectl apply -f hostpath-deployment.yaml
   35  kubectl get pods -o wide
   36  kubectl delete -f hostpath-deployment.yaml
   37  kubectl get pods -o wide
   38  cat pod-ed.yaml
   39  kubectl pod delete pod-ed
   40  kubectl delete pods pod-ed
   41  kubectl get pods -o wide
   42  kubectl apply -f hostpath-deployment.yaml
   43  kubectl get pods -o wide
   44  kubectl delete -f hostpath-deployment.yaml
   45  kubectl get pods -o wide
   46  ssh vagrant@node2
   47  exit
   48  echo 'nfs-server-ip   nfs-server' | sudo tee -a /etc/hosts
   49  sudo apt-get update && apt-get install -y nfs-common
   50  chmod -R 777 /data/nfs/k8sdata
   51  cat > nfs-deployment.yaml
   52  cat nfs-deployment.yaml
   53  kubectl apply -f nfs-deployment.yaml
   54  kubectl get pods -o wide
   55  sudo chmod -R 777 /data/nfs/k8sdata
   56  mkdir --mode=777 /data/nfs/k8sdata
   57  mkdir --mode=777 /data/nfs
   58  sudo mkdir --mode=777 /data/nfs/k8sdata
   59  sudo mkdir --mode=777 /data
   60  sudo mkdir --mode=777 /data/nfs
   61  sudo mkdir --mode=777 /data/nfs/k8sdata
   62  kubectl delete -f nfs-deployment.yaml
   63  exit
   64  chmod -R 777 /data/nfs/k8sdata
   65  sudo chmod -R 777 /data/nfs/k8sdata
   66  exit
   67  kubectl delete -f hostpath-deployment.yaml
   68  cat nfs-deployment.yaml
   69  kubectl apply -f hostpath-deployment.yaml
   70  kubectl get pods -o wide
   71  kubectl describe pod notes-deploy-5485bf6fdd-jspsp
   72  kubectl delete -f nfs-deployment.yaml
   73  kubectl get pods -o wide
   74  cat > pvc10gb.yaml
   75  cat pvc10gb.yaml
   76  kubectl apply -f pvnfs10gb.yaml
   77  cat > pvnfs10gb.yaml
   78  cat pvnfs10gb.yaml
   79  kubectl apply -f pvnfs10gb.yaml
   80  kubectl get pv
   81  kubectl describe pv pvnfs10gb
   82  cat pvc10gb.yaml
   83  kubectl apply -f pvc10gb.yaml
   84  kubectl get pv
   85  kubectl get pvc
   86  kubectl describe pvc pvc10gb
   87  cat > pv-deployment.yaml
   88  cat pv-deployment.yaml
   89  kubectl apply -f pv-deployment.yaml
   90  kubectl get pods -o wide -w
   91  kubectl describe pvc pvc10gb
   92  kubectl describe pod notes-deploy-845b59c97f-pf76h
   93  kubectl get pods -o wide -w
   94  kubectl delete -f pv-deployment.yaml
   95  kubectl delete -f pvc10gb.yaml
   96  kubectl apply -f pvc10gb.yaml
   97  kubectl apply -f pv-deployment.yaml
   98  kubectl get pods -o wide -w
   99  kubectl scale --replicas=2 deployment notes-deploy
  100  kubectl delete -f pv-deployment.yaml
  101  kubectl delete -f service.yaml
  102  kubectl delete -f part1/service.yaml
  103  kubectl delete -f pvc10gb.yaml
  104  kubectl delete -f pvnfs10gb.yaml
  105  history
  106  kubectl get pods -o wide -w
  107  kubectl get pods -o wide
  108  echo 'nfs-server-ip   nfs-server' | sudo tee -a /etc/hosts
  109  ip a
  110  hostname -I
  111  cat > pod-no-env.yaml
  112  cat pod-no-env.yaml
  113  kubectl apply -f pod-no-env.yaml
  114  cat > svc-environ.yaml
  115  cat svc-environ.yaml
  116  kubectl apply -f svc-environ.yaml
  117  kubectl get pods,svc
  118  kubectl describe pod pod-no-env
  119  kubectl delete -f pod-no-env.yaml
  120  cat > pod-w-env.yaml
  121  cat pod-w-env.yaml
  122  kubectl apply -f pod-w-env.yaml
  123  kubectl describe pod pod-w-env
  124  kubectl delete -f pod-w-env.yaml
  125  kubectl create configmap environ-map-a --from-literal=XYZ1=VALUE1
  126  kubectl get cm
  127  kubectl describe cm environ-map-a
  128  kubectl get cm environ-map-a -o yaml
  129  kubectl create configmap environ-map-b --from-literal=XYZ2=42 --from-literal=XYZ3=3.14
  130  kubectl get cm
  131  kubectl delete cm environ-map-a environ-map-b
  132  cat > cm.yaml
  133  cat cm.yaml
  134  kubectl apply -f cm.yaml
  135  kubectl get cm
  136  cat > variables.conf << EOF
  137  XYZ_FF1=VALUE1
  138  XYZ_FF2=42
  139  EOF
  140  cat variables.conf
  141  kubectl create configmap environ-map-a --from-file=variables.conf
  142  kubectl get cm
  143  kubectl get cm environ-map-a -o yaml
  144  cat > flag.conf << EOF
  145  true
  146  EOF
  147  kubectl create configmap environ-map-b --from-file=debug=flag.conf
  148  kubectl get cm
  149  kubectl get cm environ-map-b -o yaml
  150  kubectl delete cm environ-map-a environ-map-b
  151  rm variables.conf flag.conf
  152  mkdir variables
  153  echo 'production' > variables/mode
  154  echo 'false' > variables/debug
  155  tree variables/
  156  kubectl create configmap environ-map-a --from-file=variables/
  157  kubectl get cm
  158  kubectl get cm environ-map-a -o yaml
  159  kubectl delete cm environ-map-a
  160  rm -rf variables/
  161  cat > pod-cm-env-var.yaml
  162  cat pod-cm-env-var.yaml
  163  kubectl apply -f pod-cm-env-var.yaml
  164  kubectl get cm environ-map-1 -o yaml
  165  kubectl delete pod pod-cm-env-var
  166  cat > pod-cm-env-vars.yaml
  167  cat pod-cm-env-vars.yaml
  168  kubectl apply -f pod-cm-env-vars.yaml
  169  kubectl delete pod pod-cm-env-vars
  170  kubectl delete cm environ-map-1
  171  kubectl get secret
  172  kubectl create secret generic secret-a --from-literal=password='Parolka1'
  173  echo 'DrugaParolka1' > password.conf
  174  kubectl create secret generic secret-b --from-file=password=password.conf
  175  kubectl get secret
  176  kubectl get secret secret-a -o yaml
  177  kubectl get secret secret-b -o yaml
  178  echo UGFyb2xrYTE= | base64 --decode
  179  kubectl delete secret secret-a secret-b
  180  cat > secrets.yaml
  181  cat secrets.yaml
  182  kubectl apply -f secrets.yaml
  183  kubectl get secrets
  184  cat > pod-secret.yaml
  185  cat pod-secret.yaml
  186  kubectl apply -f pod-secret.yaml
  187  kubectl delete pod/pod-secret service/svc-environ secret/mysecrets
  188  rm password.conf
  189  ls data/nfs
  190  sudo ls data/nfs
  191  sudo apt-get update
  192  sudo apt-get install nfs-kernel-server
  193  ls data
  194  mkdir data
  195  ls data
  196  cd data
  197  mkdir nfs
  198  cd nfs
  199  sudo mkdir k8spva
  200  sudo mkdir k8spvb
  201  sudo mkdir k8spvc
  202  ls
  203  cd ..
  204  ls /etc/exports
  205  cd etc
  206  cd /etc
  207  cd /exports
  208  ls
  209  sudo vi /etc/exports
  210  mkdir data
  211  sudo mkdir data
  212  cd data
  213  sudo mkdir nfs
  214  cd ..
  215  ls
  216  cd data
  217  ls
  218  cd ..
  219  sudo service nfs-kernel-server restart
  220  sudo nano /etc/hosts
  221  ip a
  222  hostname -I
  223  sudo nano /etc/hosts
  224  ping nfs-server
  225  cd etc
  226  cd data
  227  cd nfs
  228  sudo mkdir k8spva
  229  sudo mkdir k8spvb
  230  sudo mkdir k8spvc
  231  ls
  232  sudo chmod 777 k8spv(a,b,c)
  233  sudo chmod 777 k8spva
  234  sudo chmod 777 k8spvb
  235  sudo chmod 777 k8spvc
  236  cd /etc
  237  sudo vi exports
  238  sudo export
  239  sudo exportfs -rav
  240  cd ..
  241  cat > pvssa.yaml
  242  sudo cat > pvssa.yaml
  243  sudo cat pvssa.yaml
  244  cat > pvssa.yaml
  245  sudo cat > pvssa.yaml
  246  exit
  247  cat > pvssa.yaml
  248  cat > pvssb.yaml
  249  cat > pvssc.yaml
  250  cat pvssa.yaml
  251  cat pvssb.yaml
  252  cat pvssc.yaml
  253  ping nfs-server
  254  kubectl apply -f pvssa.yaml
  255  kubectl apply -f pvssb.yaml
  256  kubectl apply -f pvssc.yaml
  257  kubectl get pv
  258  cat > svcss.yaml
  259  cat svcss.yaml
  260  kubectl apply -f svcss.yaml
  261  kubectl get svc
  262  cat > ss.yaml
  263  cat ss.yaml
  264  kubectl apply -f ss.yaml
  265  kubectl get pod,svc,statefulset,pv,pvc
  266  cat > svcssnp.yaml
  267  kubectl apply -f svcssnp.yaml
  268  kubectl get pod,svc,statefulset,pv,pvc
  269  kubectl get pods,pvc -o wide
  270  kubectl delete pod facts-0
  271  kubect get pods,pvc -o wide
  272  kubectl get pods,pvc -o wide
  273  kubectl scale --replicas=1 statefulset/facts
  274  kubectl get pod,svc,statefulset,pv,pvc
  275  kubectl scale --replicas=3 statefulset/facts
  276  kubectl get pod,svc,statefulset,pv,pvc
  277  kubectl delete statefulset.apps/facts
  278  kubectl delete service/facts service/factsnp
  279  kubectl delete persistentvolumeclaim facts-data-facts-0 facts-data-facts-1 facts-data-facts-2
  280  kubectl delete persistentvolume pvssa pvssb pvssc
  281  history
  282  exit
  283  kubectl version --short
  284  uname -a
  285  openssl genrsa -out main.key 4096
  286  openssl req -new -x509 -key main.key -out main.crt -days 365 -subj /CN=www.hw.lab
  287  cat main.key
  288  cat main.crt
  289  cat > hwcm.yaml
  290  cat hwcm.yaml
  291  cat > hwpod.yaml
  292  cat hwpod.yaml
  293  cat > hwsec.yaml
  294  cat hwsec.yaml
  295  kubectl apply -f hwcm.yaml
  296  kubectl apply -f hwsec.yaml
  297  cat > hwsec.yaml
  298  cat hwsec.yaml
  299  kubectl apply -f hwsec.yaml
  300  base64 main.key
  301  base64 main.crt
  302  kubectl apply -f hwsec.yaml
  303  cat > hwsec.yaml
  304  kubectl apply -f hwsec.yaml
  305  cat > hwsec.yaml
  306  cat hwsec.yaml
  307  kubectl apply -f hwsec.yaml
  308  kubectl apply -f hwpod.yaml
  309  kubectl get pods
  310  kubectl get secrets
  311  kubectl get configmaps
  312  cat > hwsec.yaml
  313  cat hwsec.yaml
  314  kubectl apply -f hwsec.yaml
  315  kubectl get pods
  316  kubectl get configmaps
  317  kubectl get secrets
  318  history
  319  kubectl delete configmap hwcm
  320  kubectl delete secret hwsec
  321  kubectl delete pod hwpod
  322  kubectl get configmaps
  323  kubectl get secrets
  324  kubectl get pods
  325  history
vagrant@node1:~$ exit
logout
Connection to 127.0.0.1 closed.
PS C:\Users\NB\Kubernetes> Get-History

  Id CommandLine
  -- -----------
   1 cd .\Kubernetes\
   2 vagrant up
   3 vagrant ssh node1


PS C:\Users\NB\Kubernetes> vagrant halt
==> node3: Attempting graceful shutdown of VM...
==> node2: Attempting graceful shutdown of VM...
==> node1: Attempting graceful shutdown of VM...
PS C:\Users\NB\Kubernetes> Get-History

  Id CommandLine
  -- -----------
   1 cd .\Kubernetes\
   2 vagrant up
   3 vagrant ssh node1
   4 Get-History
   5 vagrant halt


PS C:\Users\NB\Kubernetes>